#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º—ñ–≥—Ä–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö - –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –ø–æ–ª—ñ–≤ –¥–ª—è –≥–µ–π–º–∏—Ñ—ñ–∫–∞—Ü—ñ—ó —Ç–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
"""

import os
import sys
from datetime import datetime

# –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–æ —à–ª—è—Ö—É Python
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app import app, db, User

def migrate_database():
    """–ú—ñ–≥—Ä–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    with app.app_context():
        try:
            print("üîÑ –ü–æ—á–∞—Ç–æ–∫ –º—ñ–≥—Ä–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö...")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—é—Ç—å –Ω–æ–≤—ñ –ø–æ–ª—è
            from sqlalchemy import inspect
            inspector = inspect(db.engine)
            columns = [col['name'] for col in inspector.get_columns('user')]
            
            new_fields = [
                'points', 'level', 'total_leads', 'closed_deals',
                'is_verified', 'verification_requested', 'verification_request_date',
                'verification_document_path', 'verification_notes'
            ]
            
            missing_fields = [field for field in new_fields if field not in columns]
            
            if not missing_fields:
                print("‚úÖ –í—Å—ñ –Ω–æ–≤—ñ –ø–æ–ª—è –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
                return
            
            print(f"üìù –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –ø–æ–ª—è: {', '.join(missing_fields)}")
            
            # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –ø–æ–ª—è —á–µ—Ä–µ–∑ SQL ALTER TABLE
            for field in missing_fields:
                if field == 'points':
                    db.engine.execute('ALTER TABLE user ADD COLUMN points INTEGER DEFAULT 0')
                elif field == 'level':
                    db.engine.execute('ALTER TABLE user ADD COLUMN level VARCHAR(20) DEFAULT "bronze"')
                elif field == 'total_leads':
                    db.engine.execute('ALTER TABLE user ADD COLUMN total_leads INTEGER DEFAULT 0')
                elif field == 'closed_deals':
                    db.engine.execute('ALTER TABLE user ADD COLUMN closed_deals INTEGER DEFAULT 0')
                elif field == 'is_verified':
                    db.engine.execute('ALTER TABLE user ADD COLUMN is_verified BOOLEAN DEFAULT 0')
                elif field == 'verification_requested':
                    db.engine.execute('ALTER TABLE user ADD COLUMN verification_requested BOOLEAN DEFAULT 0')
                elif field == 'verification_request_date':
                    db.engine.execute('ALTER TABLE user ADD COLUMN verification_request_date DATETIME')
                elif field == 'verification_document_path':
                    db.engine.execute('ALTER TABLE user ADD COLUMN verification_document_path VARCHAR(200)')
                elif field == 'verification_notes':
                    db.engine.execute('ALTER TABLE user ADD COLUMN verification_notes TEXT')
                
                print(f"‚úÖ –î–æ–¥–∞–Ω–æ –ø–æ–ª–µ: {field}")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Ä—ñ–≤–Ω—ñ –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            users = User.query.all()
            for user in users:
                user.update_level()
                print(f"üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ —Ä—ñ–≤–µ–Ω—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.username}: {user.level}")
            
            db.session.commit()
            print("‚úÖ –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º—ñ–≥—Ä–∞—Ü—ñ—ó: {e}")
            db.session.rollback()
            raise

if __name__ == '__main__':
    migrate_database()
