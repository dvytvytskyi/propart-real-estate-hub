from flask import Flask, render_template, request, redirect, url_for, flash, jsonify, make_response
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy import func
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from flask_bcrypt import Bcrypt
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from flask_wtf.csrf import CSRFProtect
from wtforms import StringField, PasswordField, TextAreaField, SelectField, HiddenField, DecimalField, validators
from flask_wtf import FlaskForm as Form
from dotenv import load_dotenv
import traceback
import os
import time
import threading
import requests
import phonenumbers
from phonenumbers import carrier, geocoder, timezone
import boto3
from botocore.exceptions import ClientError
import io
from hubspot import HubSpot
from logging_config import setup_logging
from hubspot_rate_limiter import hubspot_rate_limiter
from timezone_utils import get_ukraine_time, utc_to_ukraine, format_ukraine_time, parse_hubspot_timestamp

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

app = Flask(__name__)

# ===== –ß–ê–°–û–í–ò–ô –ü–û–Ø–° =====
# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å –¥–ª—è –£–∫—Ä–∞—ó–Ω–∏ (UTC+3)
import os
os.environ['TZ'] = 'Europe/Kiev'
import time
time.tzset()

# –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É –¥–ª—è Flask
app.config['TIMEZONE'] = 'Europe/Kiev'

# ===== –ë–ï–ó–ü–ï–ö–ê =====
# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å SECRET_KEY
SECRET_KEY = os.getenv('SECRET_KEY')
if not SECRET_KEY:
    import secrets
    SECRET_KEY = secrets.token_hex(32)
    app.logger.warning("SECRET_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ç–∏–º—á–∞—Å–æ–≤–∏–π –∫–ª—é—á. –î–æ–¥–∞–π—Ç–µ SECRET_KEY –≤ .env —Ñ–∞–π–ª!")
app.config['SECRET_KEY'] = SECRET_KEY

# ===== –ë–ê–ó–ê –î–ê–ù–ò–• =====
# –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑ connection pooling
# –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ SQLite, —è–∫—â–æ DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω–æ
import pathlib
basedir = pathlib.Path(__file__).parent.absolute()
app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv(
    'DATABASE_URL',
    f'sqlite:///{basedir}/instance/propart.db'
)
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# AWS S3 Configuration
app.config['AWS_ACCESS_KEY_ID'] = os.getenv('AWS_ACCESS_KEY_ID')
app.config['AWS_SECRET_ACCESS_KEY'] = os.getenv('AWS_SECRET_ACCESS_KEY')
app.config['AWS_S3_BUCKET'] = os.getenv('AWS_S3_BUCKET')
app.config['AWS_REGION'] = os.getenv('AWS_REGION', 'eu-central-1')

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è engine options –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
database_uri = app.config['SQLALCHEMY_DATABASE_URI']
if database_uri.startswith('sqlite'):
    # –î–ª—è SQLite –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    app.config['SQLALCHEMY_ENGINE_OPTIONS'] = {
        'pool_pre_ping': True,
    }
else:
    # –î–ª—è PostgreSQL –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ connection pooling
    app.config['SQLALCHEMY_ENGINE_OPTIONS'] = {
        'pool_size': 10,
        'pool_recycle': 3600,
        'pool_pre_ping': True,
        'max_overflow': 20,
        'connect_args': {
            'connect_timeout': 10,
            'options': '-c statement_timeout=30000'
        }
    }

db = SQLAlchemy(app)

# ===== –õ–û–ì–£–í–ê–ù–ù–Ø =====
setup_logging(app)

# ===== –ë–ï–ó–ü–ï–ö–ê: CSRF –∑–∞—Ö–∏—Å—Ç =====
csrf = CSRFProtect(app)
app.logger.info("‚úÖ CSRF –∑–∞—Ö–∏—Å—Ç –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ")

# ===== –ë–ï–ó–ü–ï–ö–ê: Rate Limiting =====
limiter = Limiter(
    app=app,
    key_func=get_remote_address,
    default_limits=["200 per day", "50 per hour"],
    storage_uri="memory://"
)

# ===== –ë–ï–ó–ü–ï–ö–ê: Bcrypt –¥–ª—è –ø–∞—Ä–æ–ª—ñ–≤ =====
bcrypt = Bcrypt(app)

# ===== LOGIN MANAGER =====
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

# ===== JINJA2 –§–Ü–õ–¨–¢–†–ò =====
@app.template_filter('ukraine_time')
def ukraine_time_filter(dt, format_str='%d %B %Y %H:%M'):
    """–§—ñ–ª—å—Ç—Ä –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É –≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–º—É —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—ñ"""
    return format_ukraine_time(dt, format_str)

# ===== AWS S3 CLIENT =====
def get_s3_client():
    """–°—Ç–≤–æ—Ä—é—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î S3 –∫–ª—ñ—î–Ω—Ç"""
    app.logger.info("üîç === –ü–ï–†–ï–í–Ü–†–ö–ê –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–á S3 ===")
    
    access_key = app.config.get('AWS_ACCESS_KEY_ID')
    secret_key = app.config.get('AWS_SECRET_ACCESS_KEY')
    bucket = app.config.get('AWS_S3_BUCKET')
    region = app.config.get('AWS_REGION', 'eu-central-1')
    
    app.logger.info(f"   AWS_ACCESS_KEY_ID: {'‚úÖ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' if access_key else '‚ùå –≤—ñ–¥—Å—É—Ç–Ω—î'}")
    app.logger.info(f"   AWS_SECRET_ACCESS_KEY: {'‚úÖ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' if secret_key else '‚ùå –≤—ñ–¥—Å—É—Ç–Ω—î'}")
    app.logger.info(f"   AWS_S3_BUCKET: {bucket if bucket else '‚ùå –≤—ñ–¥—Å—É—Ç–Ω—î'}")
    app.logger.info(f"   AWS_REGION: {region}")
    
    if not all([access_key, secret_key, bucket]):
        app.logger.warning("‚ö†Ô∏è S3 –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –ø–æ–≤–Ω—ñ—Å—Ç—é - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è")
        app.logger.info("   –î–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è S3 –¥–æ–¥–∞–π—Ç–µ –≤ .env —Ñ–∞–π–ª:")
        app.logger.info("   AWS_ACCESS_KEY_ID=your_access_key")
        app.logger.info("   AWS_SECRET_ACCESS_KEY=your_secret_key")
        app.logger.info("   AWS_S3_BUCKET=your_bucket_name")
        app.logger.info("   AWS_REGION=eu-central-1")
        return None
    
    try:
        app.logger.info("üöÄ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è S3 –∫–ª—ñ—î–Ω—Ç–∞...")
        s3_client = boto3.client(
            's3',
            aws_access_key_id=access_key,
            aws_secret_access_key=secret_key,
            region_name=region
        )
        
        # –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        app.logger.info("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ S3...")
        s3_client.head_bucket(Bucket=bucket)
        app.logger.info("‚úÖ S3 –∫–ª—ñ—î–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        return s3_client
        
    except Exception as e:
        app.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è S3 –∫–ª—ñ—î–Ω—Ç–∞: {type(e).__name__}: {str(e)}")
        app.logger.warning("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è")
        return None

def upload_file_to_s3(file, filename):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ñ–∞–π–ª –≤ S3 bucket –∑ fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è"""
    app.logger.info(f"üì§ === –ü–û–ß–ê–¢–û–ö –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –§–ê–ô–õ–£ ===")
    app.logger.info(f"   –§–∞–π–ª: {filename}")
    app.logger.info(f"   –¢–∏–ø —Ñ–∞–π–ª—É: {getattr(file, 'content_type', 'unknown')}")
    app.logger.info(f"   –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {getattr(file, 'content_length', 'unknown')} –±–∞–π—Ç")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è S3
    s3_client = get_s3_client()
    if not s3_client:
        app.logger.warning("‚ö†Ô∏è S3 –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è")
        return upload_file_locally(file, filename)
    
    try:
        bucket = app.config['AWS_S3_BUCKET']
        content_type = file.content_type if hasattr(file, 'content_type') else 'application/octet-stream'
        
        app.logger.info(f"   S3 Bucket: {bucket}")
        app.logger.info(f"   Content-Type: {content_type}")
        app.logger.info(f"   AWS Region: {app.config.get('AWS_REGION', 'eu-central-1')}")
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ —Ñ–∞–π–ª—É –ø–µ—Ä–µ–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º
        file.seek(0)
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª –≤ S3
        app.logger.info("üöÄ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –≤ S3...")
        s3_client.upload_fileobj(
            file,
            bucket,
            filename,
            ExtraArgs={
                'ContentType': content_type,
                'ACL': 'public-read'  # –†–æ–±–∏–º–æ —Ñ–∞–π–ª –ø—É–±–ª—ñ—á–Ω–∏–º
            }
        )
        
        # –§–æ—Ä–º—É—î–º–æ URL —Ñ–∞–π–ª—É
        s3_url = f"https://{bucket}.s3.{app.config['AWS_REGION']}.amazonaws.com/{filename}"
        app.logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –≤ S3: {s3_url}")
        return s3_url
        
    except ClientError as e:
        error_code = e.response.get('Error', {}).get('Code', 'Unknown')
        error_message = e.response.get('Error', {}).get('Message', 'Unknown')
        app.logger.error(f"‚ùå AWS ClientError: {error_code} - {error_message}")
        app.logger.error(f"   –ü–æ–≤–Ω–∏–π response: {e.response}")
        app.logger.warning("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ S3 - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è")
        return upload_file_locally(file, filename)
    except Exception as e:
        app.logger.error(f"‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ S3: {type(e).__name__}: {str(e)}")
        app.logger.warning("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ S3 - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è")
        return upload_file_locally(file, filename)


def upload_file_locally(file, filename):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ —è–∫ fallback"""
    app.logger.info(f"üíæ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –ª–æ–∫–∞–ª—å–Ω–æ: {filename}")
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
        upload_dir = os.path.join(app.root_path, 'static', 'uploads')
        os.makedirs(upload_dir, exist_ok=True)
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—ñ–¥–ø–∞–ø–∫—É –∑–∞ —Ç–∏–ø–æ–º —Ñ–∞–π–ª—É
        if 'properties' in filename:
            subdir = 'properties'
        elif 'units' in filename:
            subdir = 'units'
        elif 'documents' in filename:
            subdir = 'documents'
        else:
            subdir = 'misc'
        
        full_dir = os.path.join(upload_dir, subdir)
        os.makedirs(full_dir, exist_ok=True)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–∞–π–ª
        local_filename = os.path.basename(filename)  # –ë–µ—Ä–µ–º–æ —Ç—ñ–ª—å–∫–∏ —ñ–º'—è —Ñ–∞–π–ª—É
        file_path = os.path.join(full_dir, local_filename)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø —Ñ–∞–π–ª—É
        if hasattr(file, 'save'):
            # Flask FileStorage
            file.save(file_path)
        else:
            # BytesIO –∞–±–æ —ñ–Ω—à–∏–π —Ç–∏–ø
            with open(file_path, 'wb') as f:
                f.write(file.read())
        
        # –§–æ—Ä–º—É—î–º–æ URL –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É
        local_url = f"/static/uploads/{subdir}/{local_filename}"
        app.logger.info(f"‚úÖ –§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ: {local_url}")
        return local_url
        
    except Exception as e:
        app.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è: {type(e).__name__}: {str(e)}")
        raise Exception(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ñ–∞–π–ª: {str(e)}")

def download_file_from_s3(filename):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ñ–∞–π–ª –∑ S3 bucket"""
    s3_client = get_s3_client()
    if not s3_client:
        raise Exception("S3 –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
    
    try:
        file_obj = io.BytesIO()
        s3_client.download_fileobj(app.config['AWS_S3_BUCKET'], filename, file_obj)
        file_obj.seek(0)
        return file_obj
    except ClientError as e:
        app.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ S3: {e}")
        raise Exception(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª –∑ S3: {str(e)}")

def delete_file_from_s3(filename):
    """–í–∏–¥–∞–ª—è—î —Ñ–∞–π–ª –∑ S3 bucket –∞–±–æ –ª–æ–∫–∞–ª—å–Ω–æ"""
    app.logger.info(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {filename}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –ª–æ–∫–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª
    if filename.startswith('/static/uploads/'):
        return delete_file_locally(filename)
    
    # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ S3
    s3_client = get_s3_client()
    if not s3_client:
        app.logger.warning("‚ö†Ô∏è S3 –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ - –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ S3")
        return True
    
    try:
        s3_client.delete_object(Bucket=app.config['AWS_S3_BUCKET'], Key=filename)
        app.logger.info(f"‚úÖ –§–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ –∑ S3: {filename}")
        return True
    except ClientError as e:
        app.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ S3: {e}")
        return False


def delete_file_locally(filename):
    """–í–∏–¥–∞–ª—è—î –ª–æ–∫–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª"""
    try:
        # –í–∏–¥–∞–ª—è—î–º–æ /static/ –∑ –ø–æ—á–∞—Ç–∫—É —à–ª—è—Ö—É
        if filename.startswith('/static/'):
            filename = filename[8:]  # –í–∏–¥–∞–ª—è—î–º–æ '/static/'
        
        file_path = os.path.join(app.root_path, 'static', filename)
        
        if os.path.exists(file_path):
            os.remove(file_path)
            app.logger.info(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ: {file_path}")
            return True
        else:
            app.logger.warning(f"‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {file_path}")
            return True  # –ù–µ –≤–≤–∞–∂–∞—î–º–æ —Ü–µ –ø–æ–º–∏–ª–∫–æ—é
    except Exception as e:
        app.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É: {e}")
        return False

# ===== HUBSPOT API =====
HUBSPOT_API_KEY = os.getenv('HUBSPOT_API_KEY')
if HUBSPOT_API_KEY:
    try:
        hubspot_client = HubSpot(access_token=HUBSPOT_API_KEY)
        app.logger.info("HubSpot API —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ!")
        print("HubSpot API —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ!")
    except Exception as e:
        app.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è HubSpot API: {e}")
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è HubSpot API: {e}")
        hubspot_client = None
else:
    app.logger.warning("HUBSPOT_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
    print("HUBSPOT_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
    hubspot_client = None

# –ú–æ–¥–µ–ª—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(120), nullable=False)
    role = db.Column(db.String(20), nullable=False, default='agent')  # 'agent' –∞–±–æ 'admin'
    created_at = db.Column(db.DateTime, default=db.func.current_timestamp())
    
    # –ü—Ä–∏–≤'—è–∑–∫–∞ –±—Ä–æ–∫–µ—Ä–∞ –¥–æ –∞–¥–º—ñ–Ω–∞
    admin_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)  # ID –∞–¥–º—ñ–Ω–∞ –¥–ª—è –±—Ä–æ–∫–µ—Ä—ñ–≤
    
    # –ö–æ–º—ñ—Å—ñ—è –∞–≥–µ–Ω—Ç–∞ (—É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö)
    commission = db.Column(db.Float, default=0.0)
    
    # –ì–µ–π–º–∏—Ñ—ñ–∫–∞—Ü—ñ—è
    points = db.Column(db.Integer, default=0)
    level = db.Column(db.String(20), default='bronze')  # bronze, silver, gold, platinum
    total_leads = db.Column(db.Integer, default=0)
    closed_deals = db.Column(db.Integer, default=0)
    
    # –í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è
    is_verified = db.Column(db.Boolean, default=False)
    verification_requested = db.Column(db.Boolean, default=False)
    verification_request_date = db.Column(db.DateTime)
    verification_document_path = db.Column(db.String(200))
    verification_notes = db.Column(db.Text)
    
    # –°—Ç–∞—Ç—É—Å –∞–∫–∞—É–Ω—Ç—É
    is_active = db.Column(db.Boolean, default=True)
    last_login = db.Column(db.DateTime)
    login_attempts = db.Column(db.Integer, default=0)
    locked_until = db.Column(db.DateTime)
    
    # Relationships
    # –ë—Ä–æ–∫–µ—Ä–∏, —è–∫—ñ –ø—Ä–∏–≤'—è–∑–∞–Ω—ñ –¥–æ —Ü—å–æ–≥–æ –∞–¥–º—ñ–Ω–∞
    brokers = db.relationship('User', backref=db.backref('admin', remote_side=[id]), lazy='dynamic', foreign_keys=[admin_id])
    
    def set_password(self, password):
        """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –ø–∞—Ä–æ–ª—å –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º bcrypt"""
        self.password_hash = bcrypt.generate_password_hash(password).decode('utf-8')
    
    def check_password(self, password):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø–∞—Ä–æ–ª—å (—Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å –∑ Werkzeug —Ç–∞ bcrypt)"""
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —Å—Ç–∞—Ä–∏–π Werkzeug hash
        if self.password_hash.startswith('pbkdf2:sha256'):
            from werkzeug.security import check_password_hash
            return check_password_hash(self.password_hash, password)
        # –Ü–Ω–∞–∫—à–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ bcrypt
        return bcrypt.check_password_hash(self.password_hash, password)
    
    def add_points(self, points):
        """–î–æ–¥–∞—î –ø–æ—ñ–Ω—Ç–∏ —Ç–∞ –æ–Ω–æ–≤–ª—é—î —Ä—ñ–≤–µ–Ω—å"""
        self.points += points
        self.update_level()
    
    def update_level(self):
        """–û–Ω–æ–≤–ª—é—î —Ä—ñ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—ñ–Ω—Ç—ñ–≤"""
        if self.points >= 10000:
            self.level = 'platinum'
        elif self.points >= 5000:
            self.level = 'gold'
        elif self.points >= 2000:
            self.level = 'silver'
        else:
            self.level = 'bronze'
    
    def get_commission_rate(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥—Å–æ—Ç–æ–∫ –∫–æ–º—ñ—Å—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä—ñ–≤–Ω—è"""
        rates = {
            'bronze': 5,
            'silver': 7,
            'gold': 10,
            'platinum': 15
        }
        return rates.get(self.level, 5)
    
    def get_level_display_name(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –≤—ñ–¥–æ–±—Ä–∞–∂—É–≤–∞–Ω–µ —ñ–º'—è —Ä—ñ–≤–Ω—è"""
        names = {
            'bronze': '–ë—Ä–æ–Ω–∑–æ–≤–∏–π',
            'silver': '–°—Ä—ñ–±–Ω–∏–π', 
            'gold': '–ó–æ–ª–æ—Ç–∏–π',
            'platinum': '–ü–ª–∞—Ç–∏–Ω–æ–≤–∏–π'
        }
        return names.get(self.level, '–ë—Ä–æ–Ω–∑–æ–≤–∏–π')
    
    def is_account_locked(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –∞–∫–∞—É–Ω—Ç"""
        if self.locked_until:
            from datetime import datetime
            return datetime.now() < self.locked_until
        return False
    
    def lock_account(self, minutes=30):
        """–ë–ª–æ–∫—É—î –∞–∫–∞—É–Ω—Ç –Ω–∞ –≤–∫–∞–∑–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–≤–∏–ª–∏–Ω"""
        from datetime import datetime, timedelta
        self.locked_until = datetime.now() + timedelta(minutes=minutes)
        self.login_attempts = 0
    
    def unlock_account(self):
        """–†–æ–∑–±–ª–æ–∫–æ–≤—É—î –∞–∫–∞—É–Ω—Ç"""
        self.locked_until = None
        self.login_attempts = 0
    
    def increment_login_attempts(self):
        """–ó–±—ñ–ª—å—à—É—î –ª—ñ—á–∏–ª—å–Ω–∏–∫ –Ω–µ–≤–¥–∞–ª–∏—Ö —Å–ø—Ä–æ–± –≤—Ö–æ–¥—É"""
        self.login_attempts += 1
        if self.login_attempts >= 5:  # –ë–ª–æ–∫—É—î–º–æ –ø—ñ—Å–ª—è 5 –Ω–µ–≤–¥–∞–ª–∏—Ö —Å–ø—Ä–æ–±
            self.lock_account()
    
    def reset_login_attempts(self):
        """–°–∫–∏–¥–∞—î –ª—ñ—á–∏–ª—å–Ω–∏–∫ –Ω–µ–≤–¥–∞–ª–∏—Ö —Å–ø—Ä–æ–±"""
        self.login_attempts = 0
        self.locked_until = None

class Lead(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    agent_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    agent = db.relationship('User', backref='leads', foreign_keys=[agent_id])
    deal_name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(120), nullable=False)
    phone = db.Column(db.String(20))
    budget = db.Column(db.String(50))
    status = db.Column(db.String(50), default='new')
    is_transferred = db.Column(db.Boolean, default=False)  # –ß–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –ª—ñ–¥
    notes = db.Column(db.Text)
    last_updated_hubspot = db.Column(db.DateTime)  # –û—Å—Ç–∞–Ω–Ω—ñ–π —Ä–∞–∑ –æ–Ω–æ–≤–ª—é–≤–∞–≤—Å—è –≤ HubSpot
    
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ª—è
    country = db.Column(db.String(50))  # –ö—Ä–∞—ó–Ω–∞ –ø–æ–∫—É–ø–∫–∏
    purchase_goal = db.Column(db.String(50))  # –ú–µ—Ç–∞ –ø–æ–∫—É–ø–∫–∏
    property_type = db.Column(db.String(50))  # –¢–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ
    object_type = db.Column(db.String(50))  # –¢–∏–ø –æ–±'—î–∫—Ç–∞
    communication_language = db.Column(db.String(50))  # –ú–æ–≤–∞ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è
    source = db.Column(db.String(50))  # –î–∂–µ—Ä–µ–ª–æ –ø—Ä–∏–≤–µ—Ä–Ω–µ–Ω–Ω—è
    refusal_reason = db.Column(db.String(50))  # –ü—Ä–∏—á–∏–Ω–∞ –≤—ñ–¥–º–æ–≤–∏
    
    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ
    company = db.Column(db.String(100))  # –ö–æ–º–ø–∞–Ω—ñ—è
    second_phone = db.Column(db.String(20))  # –î—Ä—É–≥–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω
    telegram_nickname = db.Column(db.String(50))  # –ù—ñ–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º—ñ
    messenger = db.Column(db.String(20))  # –ú–µ—Å–µ–Ω–¥–∂–µ—Ä
    birth_date = db.Column(db.Date)  # –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
    
    hubspot_contact_id = db.Column(db.String(50))
    hubspot_deal_id = db.Column(db.String(50))
    hubspot_stage_label = db.Column(db.String(100))  # –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ –Ω–∞–∑–≤–∞ —Å—Ç–∞–¥—ñ—ó –∑ HubSpot
    created_at = db.Column(db.DateTime, default=db.func.current_timestamp())
    updated_at = db.Column(db.DateTime, default=db.func.current_timestamp(), onupdate=db.func.current_timestamp())
    last_sync_at = db.Column(db.DateTime)  # –ß–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ HubSpot


# –§–æ—Ä–º–∏
class LoginForm(Form):
    username = StringField('–Ü–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', [validators.Length(min=4, max=25)])
    password = PasswordField('–ü–∞—Ä–æ–ª—å', [validators.DataRequired()])

class LeadForm(Form):
    deal_name = StringField('Deal name', [validators.DataRequired(), validators.Length(min=2, max=100)])
    email = StringField('Email', [validators.Optional(), validators.Email()])
    phone = StringField('Phone number', [validators.DataRequired(), validators.Length(max=20)])
    second_phone = StringField('–î—Ä—É–≥–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É', [validators.Length(max=20)])
    company = StringField('–ö–æ–º–ø–∞–Ω—ñ—è', [validators.Length(max=100)])
    telegram_nickname = StringField('Telegram', [validators.Length(max=50)])
    messenger = StringField('–ú–µ—Å–µ–Ω–¥–∂–µ—Ä', [validators.Length(max=20)])
    birth_date = StringField('–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è')
    budget = SelectField('Budget', choices=[
        ('–¥–æ 200–∫', '–¥–æ 200–∫'),
        ('200–∫‚Äì500–∫', '200–∫‚Äì500–∫'),
        ('500–∫‚Äì1–º–ª–Ω', '500–∫‚Äì1–º–ª–Ω'),
        ('1–º–ª–Ω+', '1–º–ª–Ω+')
    ], validators=[validators.DataRequired()])
    notes = TextAreaField('–ü—Ä–∏–º—ñ—Ç–∫–∏', [validators.Length(max=500)])
    agent_id = HiddenField('Agent ID')

class NoteForm(Form):
    note_text = TextAreaField('–ù–æ—Ç–∞—Ç–∫–∞', [validators.DataRequired(), validators.Length(min=1, max=1000)])

class RegistrationForm(Form):
    username = StringField('–Ü–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', [validators.DataRequired(), validators.Length(min=4, max=25)])
    email = StringField('Email', [validators.DataRequired(), validators.Email()])
    password = PasswordField('–ü–∞—Ä–æ–ª—å', [validators.DataRequired(), validators.Length(min=6)])
    confirm_password = PasswordField('–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å', [validators.DataRequired()])
    admin_id = SelectField('–ê–¥–º—ñ–Ω', coerce=int)
    
    def validate_username(self, field):
        """–í–∞–ª—ñ–¥–∞—Ü—ñ—è —ñ–º–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        username = field.data
        
        # –ó–∞–º—ñ–Ω—é—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –Ω–∞ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è
        username = username.replace(' ', '_')
        field.data = username
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –≤–µ–ª–∏–∫—ñ –ª—ñ—Ç–µ—Ä–∏
        if any(c.isupper() for c in username):
            raise validators.ValidationError('–Ü–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –≤–µ–ª–∏–∫—ñ –ª—ñ—Ç–µ—Ä–∏')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ —Å–∏–º–≤–æ–ª–∏ (—Ç—ñ–ª—å–∫–∏ –º–∞–ª–µ–Ω—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏, —Ü–∏—Ñ—Ä–∏, –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è)
        import re
        if not re.match(r'^[a-z0-9_]+$', username):
            raise validators.ValidationError('–Ü–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –º–∞–ª–µ–Ω—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏, —Ü–∏—Ñ—Ä–∏ —Ç–∞ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –Ω–µ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ —Ü–∏—Ñ—Ä–∏
        if username[0].isdigit():
            raise validators.ValidationError('–Ü–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –º–æ–∂–µ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ —Ü–∏—Ñ—Ä–∏')

class UserEditForm(Form):
    username = StringField('–Ü–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', [validators.DataRequired(), validators.Length(min=4, max=25)])
    email = StringField('Email', [validators.DataRequired(), validators.Email()])
    role = SelectField('–†–æ–ª—å', choices=[
        ('agent', '–ê–≥–µ–Ω—Ç'),
        ('admin', '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä')
    ], validators=[validators.DataRequired()])
    is_active = SelectField('–°—Ç–∞—Ç—É—Å', choices=[
        (True, '–ê–∫—Ç–∏–≤–Ω–∏–π'),
        (False, '–î–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π')
    ], coerce=bool)

class Activity(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    lead_id = db.Column(db.Integer, db.ForeignKey('lead.id'), nullable=False)
    hubspot_activity_id = db.Column(db.String(50), unique=True)  # ID –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤ HubSpot
    activity_type = db.Column(db.String(20), nullable=False)  # email, call, task, meeting, note
    subject = db.Column(db.String(200))  # –¢–µ–º–∞/–Ω–∞–∑–≤–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    body = db.Column(db.Text)  # –¢—ñ–ª–æ/–æ–ø–∏—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    status = db.Column(db.String(20), default='completed')  # completed, pending, cancelled
    direction = db.Column(db.String(10))  # inbound, outbound (–¥–ª—è calls, emails)
    duration = db.Column(db.Integer)  # –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–¥–ª—è calls, meetings)
    created_at = db.Column(db.DateTime, default=db.func.current_timestamp())
    updated_at = db.Column(db.DateTime, default=db.func.current_timestamp(), onupdate=db.func.current_timestamp())
    
    # –ó–≤'—è–∑–æ–∫ –∑ –ª—ñ–¥–æ–º
    lead = db.relationship('Lead', backref='activities')

class UserDocument(db.Model):
    """–î–æ–∫—É–º–µ–Ω—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–ø–∞—Å–ø–æ—Ä—Ç–∏, –¥–æ–≥–æ–≤–æ—Ä–∏, —Ç–æ—â–æ)"""
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    filename = db.Column(db.String(255), nullable=False)  # –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ –Ω–∞–∑–≤–∞ —Ñ–∞–π–ª—É
    file_path = db.Column(db.String(500), nullable=False)  # –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
    file_size = db.Column(db.Integer)  # –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –≤ –±–∞–π—Ç–∞—Ö
    file_type = db.Column(db.String(100))  # MIME type (image/jpeg, application/pdf, —Ç–æ—â–æ)
    uploaded_by = db.Column(db.Integer, db.ForeignKey('user.id'))  # –•—Ç–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤ (–∞–¥–º—ñ–Ω –∞–±–æ —Å–∞–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á)
    uploaded_at = db.Column(db.DateTime, default=db.func.current_timestamp())
    description = db.Column(db.String(500))  # –û–ø–∏—Å –¥–æ–∫—É–º–µ–Ω—Ç—É
    
    # –ó–≤'—è–∑–∫–∏
    user = db.relationship('User', foreign_keys=[user_id], backref='documents')
    uploader = db.relationship('User', foreign_keys=[uploaded_by])


class Property(db.Model):
    """–ú–æ–¥–µ–ª—å –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ"""
    __tablename__ = 'property'
    
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(200), nullable=False)  # –ù–∞–∑–≤–∞ –ø—Ä–æ–µ–∫—Ç—É
    location_country = db.Column(db.String(100), nullable=False)  # –ö—Ä–∞—ó–Ω–∞
    location_city = db.Column(db.String(100), nullable=False)  # –ú—ñ—Å—Ç–æ
    location_district = db.Column(db.String(100))  # –†–∞–π–æ–Ω (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    price_from = db.Column(db.Numeric(15, 2), nullable=False)  # –¶—ñ–Ω–∞ –≤—ñ–¥
    price_to = db.Column(db.Numeric(15, 2))  # –¶—ñ–Ω–∞ –¥–æ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    description = db.Column(db.Text)  # –û–ø–∏—Å –ø—Ä–æ–µ–∫—Ç—É
    payment_type = db.Column(db.Text)  # –¢–∏–ø –ø–ª–∞—Ç–µ–∂—É (—Ä–æ–∑—Ç–µ—Ä–º—ñ–Ω—É–≤–∞–Ω–Ω—è)
    created_by = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)  # –•—Ç–æ —Å—Ç–≤–æ—Ä–∏–≤
    created_at = db.Column(db.DateTime, default=db.func.current_timestamp())
    updated_at = db.Column(db.DateTime, default=db.func.current_timestamp(), onupdate=db.func.current_timestamp())
    
    # –ó–≤'—è–∑–∫–∏
    creator = db.relationship('User', backref='created_properties')
    photos = db.relationship('PropertyPhoto', backref='property', cascade='all, delete-orphan')
    units = db.relationship('PropertyUnit', backref='property', cascade='all, delete-orphan')
    documents = db.relationship('PropertyDocument', backref='property', cascade='all, delete-orphan')


class PropertyPhoto(db.Model):
    """–§–æ—Ç–æ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ"""
    __tablename__ = 'property_photo'
    
    id = db.Column(db.Integer, primary_key=True)
    property_id = db.Column(db.Integer, db.ForeignKey('property.id'), nullable=False)
    filename = db.Column(db.String(255), nullable=False)
    file_path = db.Column(db.String(500), nullable=False)
    file_size = db.Column(db.Integer)
    file_type = db.Column(db.String(100))
    uploaded_at = db.Column(db.DateTime, default=db.func.current_timestamp())
    is_main = db.Column(db.Boolean, default=False)  # –ì–æ–ª–æ–≤–Ω–µ —Ñ–æ—Ç–æ


class PropertyUnit(db.Model):
    """–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∫–≤–∞—Ä—Ç–∏—Ä/—é–Ω—ñ—Ç—ñ–≤"""
    __tablename__ = 'property_unit'
    
    id = db.Column(db.Integer, primary_key=True)
    property_id = db.Column(db.Integer, db.ForeignKey('property.id'), nullable=False)
    unit_type = db.Column(db.String(50), nullable=False)  # studio, 1, 2, 3, 4, 5, 6
    size_from = db.Column(db.Numeric(8, 2), nullable=False)  # –†–æ–∑–º—ñ—Ä –≤—ñ–¥
    size_to = db.Column(db.Numeric(8, 2))  # –†–æ–∑–º—ñ—Ä –¥–æ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    price_per_unit = db.Column(db.Numeric(15, 2), nullable=False)  # –¶—ñ–Ω–∞ –∑–∞ —é–Ω—ñ—Ç
    created_at = db.Column(db.DateTime, default=db.func.current_timestamp())
    
    # –ó–≤'—è–∑–∫–∏
    photos = db.relationship('UnitPhoto', backref='unit', cascade='all, delete-orphan')


class UnitPhoto(db.Model):
    """–§–æ—Ç–æ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è"""
    __tablename__ = 'unit_photo'
    
    id = db.Column(db.Integer, primary_key=True)
    unit_id = db.Column(db.Integer, db.ForeignKey('property_unit.id'), nullable=False)
    filename = db.Column(db.String(255), nullable=False)
    file_path = db.Column(db.String(500), nullable=False)
    file_size = db.Column(db.Integer)
    file_type = db.Column(db.String(100))
    uploaded_at = db.Column(db.DateTime, default=db.func.current_timestamp())


class PropertyDocument(db.Model):
    """–î–æ–∫—É–º–µ–Ω—Ç–∏ –ø—Ä–æ–µ–∫—Ç—É (–º–∞–∫—Å–∏–º—É–º 5)"""
    __tablename__ = 'property_document'
    
    id = db.Column(db.Integer, primary_key=True)
    property_id = db.Column(db.Integer, db.ForeignKey('property.id'), nullable=False)
    filename = db.Column(db.String(255), nullable=False)
    file_path = db.Column(db.String(500), nullable=False)
    file_size = db.Column(db.Integer)
    file_type = db.Column(db.String(100))
    uploaded_at = db.Column(db.DateTime, default=db.func.current_timestamp())
    description = db.Column(db.String(500))  # –û–ø–∏—Å –¥–æ–∫—É–º–µ–Ω—Ç—É

class LeadEditForm(Form):
    deal_name = StringField('Deal name', [validators.DataRequired(), validators.Length(min=2, max=100)])
    email = StringField('Email', [validators.Optional(), validators.Email()])
    phone = StringField('Phone number', [validators.DataRequired(), validators.Length(max=20)])


class PropertyForm(Form):
    name = StringField('–ù–∞–∑–≤–∞ –ø—Ä–æ–µ–∫—Ç—É', [validators.DataRequired(), validators.Length(min=2, max=200)])
    location_country = SelectField('–ö—Ä–∞—ó–Ω–∞', [validators.DataRequired()], choices=[
        ('–£–∫—Ä–∞—ó–Ω–∞', '–£–∫—Ä–∞—ó–Ω–∞'),
        ('–î—É–±–∞–π', '–î—É–±–∞–π'),
        ('–†—É–º—É–Ω—ñ—è', '–†—É–º—É–Ω—ñ—è'),
        ('–ó–∞–Ω–∑–∏–±–∞—Ä', '–ó–∞–Ω–∑–∏–±–∞—Ä'),
        ('–ü—ñ–≤–Ω—ñ—á–Ω–∏–π –ö—ñ–ø—Ä', '–ü—ñ–≤–Ω—ñ—á–Ω–∏–π –ö—ñ–ø—Ä'),
        ('–ü—ñ–≤–¥–µ–Ω–Ω–∏–π –ö—ñ–ø—Ä', '–ü—ñ–≤–¥–µ–Ω–Ω–∏–π –ö—ñ–ø—Ä'),
        ('–¢—É—Ä—Ü—ñ—è', '–¢—É—Ä—Ü—ñ—è'),
        ('–ë–∞–ª—ñ', '–ë–∞–ª—ñ'),
        ('–ß–æ—Ä–Ω–æ–≥–æ—Ä—ñ—è', '–ß–æ—Ä–Ω–æ–≥–æ—Ä—ñ—è'),
        ('–ë–æ–ª–≥–∞—Ä—ñ—è', '–ë–æ–ª–≥–∞—Ä—ñ—è'),
        ('–Ü—Å–ø–∞–Ω—ñ—è', '–Ü—Å–ø–∞–Ω—ñ—è')
    ])
    location_city = StringField('–ú—ñ—Å—Ç–æ', [validators.DataRequired(), validators.Length(min=2, max=100)])
    location_district = StringField('–†–∞–π–æ–Ω (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)', [validators.Length(max=100)])
    price_from = DecimalField('–¶—ñ–Ω–∞ –≤—ñ–¥', [validators.DataRequired(), validators.NumberRange(min=0)])
    price_to = DecimalField('–¶—ñ–Ω–∞ –¥–æ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)', [validators.NumberRange(min=0)])
    description = TextAreaField('–û–ø–∏—Å –ø—Ä–æ–µ–∫—Ç—É', [validators.Length(max=2000)], render_kw={'rows': 5})
    payment_type = TextAreaField('–¢–∏–ø –ø–ª–∞—Ç–µ–∂—É (—Ä–æ–∑—Ç–µ—Ä–º—ñ–Ω—É–≤–∞–Ω–Ω—è)', [validators.Length(max=1000)])


class UnitForm(Form):
    unit_type = SelectField('–¢–∏–ø –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è', [validators.DataRequired()], choices=[
        ('studio', 'Studio'),
        ('1', '1 –∫—ñ–º–Ω–∞—Ç–∞'),
        ('2', '2 –∫—ñ–º–Ω–∞—Ç–∏'),
        ('3', '3 –∫—ñ–º–Ω–∞—Ç–∏'),
        ('4', '4 –∫—ñ–º–Ω–∞—Ç–∏'),
        ('5', '5 –∫—ñ–º–Ω–∞—Ç'),
        ('6', '6 –∫—ñ–º–Ω–∞—Ç')
    ])
    size_from = DecimalField('–†–æ–∑–º—ñ—Ä –≤—ñ–¥ (–º¬≤)', [validators.DataRequired(), validators.NumberRange(min=0)])
    size_to = DecimalField('–†–æ–∑–º—ñ—Ä –¥–æ (–º¬≤) (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)', [validators.NumberRange(min=0)])
    price_per_unit = DecimalField('–¶—ñ–Ω–∞ –∑–∞ —é–Ω—ñ—Ç', [validators.DataRequired(), validators.NumberRange(min=0)])
    budget = SelectField('Budget', choices=[
        ('', '–û–±–µ—Ä—ñ—Ç—å –±—é–¥–∂–µ—Ç'),
        ('–¥–æ 200–∫', '–¥–æ 200–∫'),
        ('200–∫‚Äì500–∫', '200–∫‚Äì500–∫'),
        ('500–∫‚Äì1–º–ª–Ω', '500–∫‚Äì1–º–ª–Ω'),
        ('1–º–ª–Ω+', '1–º–ª–Ω+')
    ])
    status = SelectField('Status', choices=[
        ('new', '–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞'),
        ('contacted', '–ù–∞ –∑–≤\'—è–∑–∫—É'),
        ('qualified', '–ö–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π'),
        ('closed', '–ó–∞–∫—Ä–∏—Ç–∏–π')
    ])
    country = SelectField('–ö—Ä–∞—ó–Ω–∞ –ø–æ–∫—É–ø–∫–∏', choices=[
        ('', '–û–±–µ—Ä—ñ—Ç—å –∫—Ä–∞—ó–Ω—É'),
        ('–î—É–±–∞–π', '–î—É–±–∞–π'),
        ('–¢—É—Ä—Ü—ñ—è', '–¢—É—Ä—Ü—ñ—è'),
        ('–ë–∞–ª—ñ', '–ë–∞–ª—ñ'),
        ('–¢–∞—ó–ª–∞–Ω–¥', '–¢–∞—ó–ª–∞–Ω–¥'),
        ('–ö–∞–º–±–æ–¥–∂–∞', '–ö–∞–º–±–æ–¥–∂–∞'),
        ('–û–º–∞–Ω', '–û–º–∞–Ω'),
        ('–ê–±—É-–î–∞–±—ñ', '–ê–±—É-–î–∞–±—ñ'),
        ('–ú–∞–ª—å–¥—ñ–≤–∏', '–ú–∞–ª—å–¥—ñ–≤–∏'),
        ('–†—É–º—É–Ω—ñ—è', '–†—É–º—É–Ω—ñ—è'),
        ('–Ü—Å–ø–∞–Ω—ñ—è', '–Ü—Å–ø–∞–Ω—ñ—è'),
        ('–ß–æ—Ä–Ω–æ–≥–æ—Ä—ñ—è', '–ß–æ—Ä–Ω–æ–≥–æ—Ä—ñ—è'),
        ('–ì—Ä–µ—Ü—ñ—è', '–ì—Ä–µ—Ü—ñ—è'),
        ('–ü—ñ–≤–Ω—ñ—á–Ω–∏–π –ö—ñ–ø—Ä', '–ü—ñ–≤–Ω—ñ—á–Ω–∏–π –ö—ñ–ø—Ä'),
        ('–ü—ñ–≤–¥–µ–Ω–Ω–∏–π –ö—ñ–ø—Ä', '–ü—ñ–≤–¥–µ–Ω–Ω–∏–π –ö—ñ–ø—Ä')
    ])
    purchase_goal = SelectField('–ú–µ—Ç–∞ –ø–æ–∫—É–ø–∫–∏', choices=[
        ('', '–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç—É'),
        ('–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞', '–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∞'),
        ('–ø–æ–¥ –∞—Ä–µ–Ω–¥—É', '–ü—ñ–¥ –∞—Ä–µ–Ω–¥—É'),
        ('–¥–ª—è —Å–µ–±—è', '–î–ª—è —Å–µ–±–µ')
    ])
    property_type = SelectField('–¢–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ', choices=[
        ('', '–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø'),
        ('–æ—Ñ—Ñ-–ø–ª–∞–Ω', '–û—Ñ—Ñ-–ø–ª–∞–Ω'),
        ('–≤—Ç–æ—Ä–∏—á–∫–∞', '–í—Ç–æ—Ä–∏—á–∫–∞'),
        ('–∫–æ–º–º–µ—Ä—Ü–∏—è', '–ö–æ–º–µ—Ä—Ü—ñ—è')
    ])
    object_type = SelectField('–¢–∏–ø –æ–±\'—î–∫—Ç–∞', choices=[
        ('', '–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –æ–±\'—î–∫—Ç–∞'),
        ('–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã', '–ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∏'),
        ('–≤–∏–ª–ª–∞', '–í—ñ–ª–ª–∞'),
        ('—Ç–∞—É–Ω—Ö–∞—É—Å', '–¢–∞—É–Ω—Ö–∞—É—Å'),
        ('–æ—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä', '–ì–æ—Ç–µ–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä'),
        ('–æ—Ç–µ–ª—å', '–ì–æ—Ç–µ–ª—å'),
        ('–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ', '–ö–æ–º–µ—Ä—Ü—ñ–π–Ω–µ –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è'),
        ('–∑–µ–º–ª—è', '–ó–µ–º–ª—è')
    ])
    communication_language = SelectField('–ú–æ–≤–∞ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è', choices=[
        ('', '–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É'),
        ('—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π', '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞'),
        ('—Ä—É—Å—Å–∫–∏–π', '–†–æ—Å—ñ–π—Å—å–∫–∞'),
        ('–∞–Ω–≥–ª–∏–π—Å–∫–∏–π', '–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞')
    ])
    source = SelectField('–î–∂–µ—Ä–µ–ª–æ –ø—Ä–∏–≤–µ—Ä–Ω–µ–Ω–Ω—è', choices=[
        ('', '–û–±–µ—Ä—ñ—Ç—å –¥–∂–µ—Ä–µ–ª–æ'),
        ('–±–ª–æ–≥–µ—Ä-–∞–≥–µ–Ω—Ç', '–ë–ª–æ–≥–µ—Ä-–∞–≥–µ–Ω—Ç'),
        ('–∞–≥–µ–Ω—Ç', '–ê–≥–µ–Ω—Ç'),
        ('—é—Ç—É–±', 'YouTube'),
        ('—Å–æ—Ü —Å–µ—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏', '–°–æ—Ü –º–µ—Ä–µ–∂—ñ –∫–æ–º–ø–∞–Ω—ñ—ó'),
        ('—Å–æ—Ü —Å–µ—Ç–∏ –õ–æ–≥–∞—á–µ–≤–∞', '–°–æ—Ü –º–µ—Ä–µ–∂—ñ –õ–æ–≥–∞—á–æ–≤–∞'),
        ('—Å–∞–π—Ç', '–°–∞–π—Ç'),
        ('—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è'),
        ('–ª–∏—á–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç', '–û—Å–æ–±–∏—Å—Ç–∏–π –∫–æ–Ω—Ç–∞–∫—Ç'),
        ('—Ä–µ–∫–ª–∞–º–∞/—Ç–∞—Ä–≥–µ—Ç', '–†–µ–∫–ª–∞–º–∞/—Ç–∞—Ä–≥–µ—Ç')
    ])
    refusal_reason = SelectField('–ü—Ä–∏—á–∏–Ω–∞ –≤—ñ–¥–º–æ–≤–∏', choices=[
        ('', '–û–±–µ—Ä—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É'),
        ('–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –∑–≤–æ–Ω–∫–∏ –∏ —Å–º—Å', '–Ü–≥–Ω–æ—Ä—É—î –¥–∑–≤—ñ–Ω–∫–∏ —Ç–∞ SMS'),
        ('–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±—é–¥–∂–µ—Ç', '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ–π –±—é–¥–∂–µ—Ç'),
        ('–Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å', '–ù–µ –ø–ª–∞–Ω—É—î –∫—É–ø—É–≤–∞—Ç–∏'),
        ('–∫—É–ø–∏–ª —Å–∞–º –∏–ª–∏ —Å –¥—Ä—É–≥–∏–º –ê–ù', '–ö—É–ø–∏–≤ —Å–∞–º –∞–±–æ –∑ —ñ–Ω—à–∏–º –ê–ù'),
        ('–Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª –∑–∞—è–≤–∫—É', '–ù–µ –∑–∞–ª–∏—à–∞–≤ –∑–∞—è–≤–∫—É'),
        ('—Ä–∏–µ–ª—Ç–æ—Ä', '–†—ñ—î–ª—Ç–æ—Ä'),
        ('–º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞', '–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–±—É–¥–æ–≤–Ω–∏–∫–∞')
    ])
    
    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ
    company = StringField('–ö–æ–º–ø–∞–Ω—ñ—è', [validators.Length(max=100)])
    second_phone = StringField('–î—Ä—É–≥–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É', [validators.Length(max=20)])
    telegram_nickname = StringField('–ù—ñ–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º—ñ', [validators.Length(max=50)])
    messenger = SelectField('–ú–µ—Å–µ–Ω–¥–∂–µ—Ä', choices=[
        ('', '–û–±–µ—Ä—ñ—Ç—å –º–µ—Å–µ–Ω–¥–∂–µ—Ä'),
        ('whatsapp', 'WhatsApp'),
        ('telegram', 'Telegram'),
        ('viber', 'Viber'),
        ('botim', 'Botim'),
        ('signal', 'Signal')
    ])
    birth_date = StringField('–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è', [validators.Length(max=10)])


@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

def get_budget_value(budget_str):
    """–ö–æ–Ω–≤–µ—Ä—Ç—É—î —Å—Ç—Ä–æ–∫—É –±—é–¥–∂–µ—Ç—É –≤ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É"""
    if not budget_str:
        return 0
    
    budget_str = budget_str.lower().replace(' ', '')
    
    if '–¥–æ 200–∫' in budget_str:
        return 200000
    elif '200–∫‚Äì500–∫' in budget_str or '200–∫-500–∫' in budget_str:
        return 350000  # –°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è
    elif '500–∫‚Äì1–º–ª–Ω' in budget_str or '500–∫-1–º–ª–Ω' in budget_str:
        return 750000  # –°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è
    elif '1–º–ª–Ω+' in budget_str:
        return 1500000  # –ü—Ä–∏–±–ª–∏–∑–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
    else:
        return 0

def fetch_activities_from_hubspot(lead):
    """–û—Ç—Ä–∏–º—É—î –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∑ HubSpot –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—É —Ç–∞ —É–≥–æ–¥–∏"""
    if not hubspot_client or not lead.hubspot_contact_id:
        print(f"–ù–µ–º–∞—î HubSpot –∫–ª—ñ—î–Ω—Ç–∞ –∞–±–æ ID –∫–æ–Ω—Ç–∞–∫—Ç—É –¥–ª—è –ª—ñ–¥–∞ {lead.id}")
        return []
    
    activities = []
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ emails
        try:
            from hubspot.crm.objects.emails import PublicObjectSearchRequest
            from hubspot.crm.objects.emails import Filter, FilterGroup
            
            email_search_request = PublicObjectSearchRequest(
                filter_groups=[
                    FilterGroup(
                        filters=[
                            Filter(
                                property_name="hs_email_subject",
                                operator="HAS_PROPERTY"
                            )
                        ]
                    )
                ],
                properties=["hs_email_subject", "hs_email_text", "hs_email_direction", "hs_email_status", "hs_createdate"],
                limit=50
            )
            
            email_results = hubspot_client.crm.objects.emails.search_api.do_search(
                public_object_search_request=email_search_request
            )
            
            if email_results.results:
                for email in email_results.results:
                    if email.properties:
                        activities.append({
                            'id': str(email.id),
                            'type': 'email',
                            'subject': email.properties.get('hs_email_subject', ''),
                            'body': email.properties.get('hs_email_text', ''),
                            'direction': email.properties.get('hs_email_direction', ''),
                            'status': email.properties.get('hs_email_status', ''),
                            'createdate': email.properties.get('hs_createdate'),
                            'source': 'email'
                        })
        except Exception as email_error:
            print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è emails: {email_error}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ calls
        try:
            from hubspot.crm.objects.calls import PublicObjectSearchRequest
            from hubspot.crm.objects.calls import Filter, FilterGroup
            
            call_search_request = PublicObjectSearchRequest(
                filter_groups=[
                    FilterGroup(
                        filters=[
                            Filter(
                                property_name="hs_call_title",
                                operator="HAS_PROPERTY"
                            )
                        ]
                    )
                ],
                properties=["hs_call_title", "hs_call_body", "hs_call_direction", "hs_call_status", "hs_call_duration", "hs_createdate"],
                limit=50
            )
            
            call_results = hubspot_client.crm.objects.calls.search_api.do_search(
                public_object_search_request=call_search_request
            )
            
            if call_results.results:
                for call in call_results.results:
                    if call.properties:
                        activities.append({
                            'id': str(call.id),
                            'type': 'call',
                            'subject': call.properties.get('hs_call_title', ''),
                            'body': call.properties.get('hs_call_body', ''),
                            'direction': call.properties.get('hs_call_direction', ''),
                            'status': call.properties.get('hs_call_status', ''),
                            'duration': call.properties.get('hs_call_duration'),
                            'createdate': call.properties.get('hs_createdate'),
                            'source': 'call'
                        })
        except Exception as call_error:
            print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è calls: {call_error}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ tasks
        try:
            from hubspot.crm.objects.tasks import PublicObjectSearchRequest
            from hubspot.crm.objects.tasks import Filter, FilterGroup
            
            task_search_request = PublicObjectSearchRequest(
                filter_groups=[
                    FilterGroup(
                        filters=[
                            Filter(
                                property_name="hs_task_subject",
                                operator="HAS_PROPERTY"
                            )
                        ]
                    )
                ],
                properties=["hs_task_subject", "hs_task_body", "hs_task_status", "hs_createdate"],
                limit=50
            )
            
            task_results = hubspot_client.crm.objects.tasks.search_api.do_search(
                public_object_search_request=task_search_request
            )
            
            if task_results.results:
                for task in task_results.results:
                    if task.properties:
                        activities.append({
                            'id': str(task.id),
                            'type': 'task',
                            'subject': task.properties.get('hs_task_subject', ''),
                            'body': task.properties.get('hs_task_body', ''),
                            'status': task.properties.get('hs_task_status', ''),
                            'createdate': task.properties.get('hs_createdate'),
                            'source': 'task'
                        })
        except Exception as task_error:
            print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è tasks: {task_error}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ meetings
        try:
            from hubspot.crm.objects.meetings import PublicObjectSearchRequest
            from hubspot.crm.objects.meetings import Filter, FilterGroup
            
            meeting_search_request = PublicObjectSearchRequest(
                filter_groups=[
                    FilterGroup(
                        filters=[
                            Filter(
                                property_name="hs_meeting_title",
                                operator="HAS_PROPERTY"
                            )
                        ]
                    )
                ],
                properties=["hs_meeting_title", "hs_meeting_body", "hs_meeting_status", "hs_meeting_duration", "hs_createdate"],
                limit=50
            )
            
            meeting_results = hubspot_client.crm.objects.meetings.search_api.do_search(
                public_object_search_request=meeting_search_request
            )
            
            if meeting_results.results:
                for meeting in meeting_results.results:
                    if meeting.properties:
                        activities.append({
                            'id': str(meeting.id),
                            'type': 'meeting',
                            'subject': meeting.properties.get('hs_meeting_title', ''),
                            'body': meeting.properties.get('hs_meeting_body', ''),
                            'status': meeting.properties.get('hs_meeting_status', ''),
                            'duration': meeting.properties.get('hs_meeting_duration'),
                            'createdate': meeting.properties.get('hs_createdate'),
                            'source': 'meeting'
                        })
        except Exception as meeting_error:
            print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è meetings: {meeting_error}")
        
        print(f"–û—Ç—Ä–∏–º–∞–Ω–æ {len(activities)} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∑ HubSpot –¥–ª—è –ª—ñ–¥–∞ {lead.id}")
        return activities
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∑ HubSpot –¥–ª—è –ª—ñ–¥–∞ {lead.id}: {e}")
        return []

def sync_activities_from_hubspot(lead):
    """–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∑ HubSpot –≤ –ª–æ–∫–∞–ª—å–Ω—É –ë–î"""
    if not hubspot_client or not lead.hubspot_contact_id:
        return False
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∑ HubSpot
        hubspot_activities = fetch_activities_from_hubspot(lead)
        
        for activity_data in hubspot_activities:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –≤–∂–µ —Ç–∞–∫–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤ –ª–æ–∫–∞–ª—å–Ω—ñ–π –ë–î
            existing_activity = Activity.query.filter_by(
                hubspot_activity_id=activity_data['id']
            ).first()
            
            if not existing_activity and activity_data['subject'].strip():
                # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤ –ª–æ–∫–∞–ª—å–Ω—ñ–π –ë–î
                new_activity = Activity(
                    lead_id=lead.id,
                    hubspot_activity_id=activity_data['id'],
                    activity_type=activity_data['type'],
                    subject=activity_data['subject'],
                    body=activity_data.get('body', ''),
                    status=activity_data.get('status', 'completed'),
                    direction=activity_data.get('direction', ''),
                    duration=activity_data.get('duration')
                )
                
                # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –¥–∞—Ç—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑ HubSpot, —è–∫—â–æ —î
                if activity_data.get('createdate'):
                    try:
                        # HubSpot –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ timestamp (–º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∏)
                        timestamp_ms = int(activity_data['createdate'])
                        new_activity.created_at = parse_hubspot_timestamp(timestamp_ms)
                    except (ValueError, TypeError):
                        pass  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É
                
                db.session.add(new_activity)
                print(f"–î–æ–¥–∞–Ω–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑ HubSpot –¥–ª—è –ª—ñ–¥–∞ {lead.id}: {activity_data['type']} - {activity_data['subject'][:50]}...")
        
        db.session.commit()
        print(f"–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ {len(hubspot_activities)} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∑ HubSpot –¥–ª—è –ª—ñ–¥–∞ {lead.id}")
        return True
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –¥–ª—è –ª—ñ–¥–∞ {lead.id}: {e}")
        db.session.rollback()
        return False

def update_hubspot_owner(lead, new_agent_id):
    """–û–Ω–æ–≤–ª—é—î hubspot_owner_id –≤ HubSpot —É–≥–æ–¥—ñ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –∞–≥–µ–Ω—Ç–∞"""
    if not hubspot_client or not lead.hubspot_deal_id:
        return False
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        new_agent = User.query.get(new_agent_id)
        if not new_agent:
            print(f"‚ö†Ô∏è –ê–≥–µ–Ω—Ç –∑ ID {new_agent_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        # –®—É–∫–∞—î–º–æ HubSpot owner ID –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        hubspot_owner_id = None
        try:
            print(f"üîç –ü–æ—à—É–∫ HubSpot owner –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: {new_agent.email}")
            owners = hubspot_client.crm.owners.owners_api.get_page()
            for owner in owners.results:
                if owner.email and owner.email.lower() == new_agent.email.lower():
                    hubspot_owner_id = str(owner.id)
                    print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ HubSpot owner ID: {hubspot_owner_id} –¥–ª—è {new_agent.email}")
                    break
            if not hubspot_owner_id:
                print(f"‚ö†Ô∏è HubSpot owner –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è {new_agent.email}")
                return False
        except Exception as owner_error:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É HubSpot owner: {owner_error}")
            app.logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É HubSpot owner –¥–ª—è {new_agent.email}: {owner_error}")
            return False
        
        # –û–Ω–æ–≤–ª—é—î–º–æ hubspot_owner_id –≤ —É–≥–æ–¥—ñ
        from hubspot.crm.deals import SimplePublicObjectInput
        deal_properties = {"hubspot_owner_id": hubspot_owner_id}
        deal_input = SimplePublicObjectInput(properties=deal_properties)
        
        hubspot_client.crm.deals.basic_api.update(
            deal_id=lead.hubspot_deal_id,
            simple_public_object_input=deal_input
        )
        
        print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ HubSpot owner –¥–ª—è –ª—ñ–¥–∞ {lead.id}: {hubspot_owner_id}")
        app.logger.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ HubSpot owner –¥–ª—è –ª—ñ–¥–∞ {lead.id}: {hubspot_owner_id}")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è HubSpot owner: {e}")
        app.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è HubSpot owner –¥–ª—è –ª—ñ–¥–∞ {lead.id}: {e}")
        return False

def update_hubspot_dealstage(lead, new_status):
    """–û–Ω–æ–≤–ª—é—î dealstage –≤ HubSpot –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É"""
    if not hubspot_client or not lead.hubspot_deal_id:
        return False
    
    try:
        # –ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –º–∞–ø–ø—ñ–Ω–≥: –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å ‚Üí HubSpot dealstage ID
        reverse_stage_mapping = {
            'new': '3204738258',        # –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (–æ–Ω–æ–≤–ª–µ–Ω–æ)
            'contacted': '3204738259',  # –ö–æ–Ω—Ç–∞–∫—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–æ–Ω–æ–≤–ª–µ–Ω–æ)
            'qualified': '3204738261',  # –ö–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ
            'closed': '3204738267'      # –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞
        }
        
        if new_status not in reverse_stage_mapping:
            print(f"‚ö†Ô∏è –ù–µ–º–∞—î –º–∞–ø–ø—ñ–Ω–≥—É –¥–ª—è —Å—Ç–∞—Ç—É—Å—É '{new_status}', dealstage –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ")
            return False
        
        hubspot_dealstage = reverse_stage_mapping[new_status]
        
        # –û–Ω–æ–≤–ª—é—î–º–æ dealstage –≤ HubSpot
        hubspot_client.crm.deals.basic_api.update(
            deal_id=lead.hubspot_deal_id,
            simple_public_object_input={
                "properties": {
                    "dealstage": hubspot_dealstage
                }
            }
        )
        
        print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ HubSpot dealstage –¥–ª—è –ª—ñ–¥–∞ {lead.id}: {new_status} ‚Üí {hubspot_dealstage}")
        app.logger.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ HubSpot dealstage –¥–ª—è –ª—ñ–¥–∞ {lead.id}: {new_status} ‚Üí {hubspot_dealstage}")
        return True
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è HubSpot dealstage –¥–ª—è –ª—ñ–¥–∞ {lead.id}: {e}")
        app.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è HubSpot dealstage: {e}")
        return False

def sync_lead_from_hubspot(lead):
    """–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î –¥–∞–Ω—ñ –ª—ñ–¥–∞ –∑ HubSpot"""
    if not hubspot_client or not lead.hubspot_contact_id:
        print(f"–ù–µ–º–∞—î HubSpot –∫–ª—ñ—î–Ω—Ç–∞ –∞–±–æ ID –∫–æ–Ω—Ç–∞–∫—Ç—É –¥–ª—è –ª—ñ–¥–∞ {lead.id}")
        return False
    
    try:
        print(f"–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –ª—ñ–¥ {lead.id} –∑ HubSpot –∫–æ–Ω—Ç–∞–∫—Ç–æ–º {lead.hubspot_contact_id}")
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç –∑ HubSpot –∑ —É—Å—ñ–º–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏
        contact = hubspot_client.crm.contacts.basic_api.get_by_id(
            contact_id=lead.hubspot_contact_id,
            properties=[
                "email", "phone", "phone_number", "mobilephone", "hs_phone_number", 
                "firstname", "lastname", "notes_last_contacted", "hs_last_activity_date",
                "phone_number_1", "telegram__cloned_", "messenger__cloned_", "birthdate__cloned_", "company",
                "telegram", "messenger", "birthdate"
            ]
        )
        print(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç –∑ HubSpot: {contact.properties}")
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –ª—ñ–¥–∞
        if contact.properties:
            # –û–Ω–æ–≤–ª—é—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ
            if contact.properties.get('firstname') and contact.properties.get('lastname'):
                lead.deal_name = f"{contact.properties['firstname']} {contact.properties['lastname']}"
            
            # –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –ø–æ–ª—ñ–≤
            print(f"üìû –¢–µ–ª–µ—Ñ–æ–Ω–Ω—ñ –ø–æ–ª—è –∑ HubSpot:")
            print(f"   phone: {contact.properties.get('phone')}")
            print(f"   phone_number: {contact.properties.get('phone_number')}")
            print(f"   mobilephone: {contact.properties.get('mobilephone')}")
            print(f"   hs_phone_number: {contact.properties.get('hs_phone_number')}")
            print(f"   phone_number_1: {contact.properties.get('phone_number_1')}")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: phone_number > mobilephone > hs_phone_number > phone)
            phone_to_use = None
            source = None
            
            if contact.properties.get('phone_number'):
                phone_to_use = contact.properties['phone_number']
                source = "phone_number"
            elif contact.properties.get('mobilephone'):
                phone_to_use = contact.properties['mobilephone']
                source = "mobilephone"
            elif contact.properties.get('hs_phone_number'):
                phone_to_use = contact.properties['hs_phone_number']
                source = "hs_phone_number"
            elif contact.properties.get('phone'):
                phone_to_use = contact.properties['phone']
                source = "phone"
            
            if phone_to_use:
                lead.phone = phone_to_use
                print(f"‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ {source}: {phone_to_use}")
                print(f"üì± –û–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–º–µ—Ä –ª—ñ–¥–∞: {lead.phone}")
            else:
                print(f"‚ö†Ô∏è –ñ–æ–¥–Ω–µ phone –ø–æ–ª–µ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ HubSpot!")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ (–¥—Ä—É–≥–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É)
            print(f"üìû –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—Ä—É–≥–æ–≥–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
            print(f"   phone_number_1: {contact.properties.get('phone_number_1')}")
            if contact.properties.get('phone_number_1'):
                lead.second_phone = contact.properties['phone_number_1']
                print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –¥—Ä—É–≥–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω (phone_number_1): {lead.second_phone}")
            else:
                print(f"‚ö†Ô∏è –î—Ä—É–≥–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É (phone_number_1) –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ HubSpot")
            
            # –ú–∞–ø–∏–º–æ telegram (—Å–ø–æ—á–∞—Ç–∫—É –±–µ–∑ __cloned_, –ø–æ—Ç—ñ–º –∑)
            if contact.properties.get('telegram'):
                lead.telegram_nickname = contact.properties['telegram']
                print(f"–û–Ω–æ–≤–ª–µ–Ω–æ telegram –∑ –∫–æ–Ω—Ç–∞–∫—Ç—É: {contact.properties['telegram']}")
            elif contact.properties.get('telegram__cloned_'):
                lead.telegram_nickname = contact.properties['telegram__cloned_']
                print(f"–û–Ω–æ–≤–ª–µ–Ω–æ telegram –∑ –∫–æ–Ω—Ç–∞–∫—Ç—É (__cloned_): {contact.properties['telegram__cloned_']}")
            
            # –ú–∞–ø–∏–º–æ messenger (—Å–ø–æ—á–∞—Ç–∫—É –±–µ–∑ __cloned_, –ø–æ—Ç—ñ–º –∑)
            if contact.properties.get('messenger'):
                lead.messenger = contact.properties['messenger']
                print(f"–û–Ω–æ–≤–ª–µ–Ω–æ messenger –∑ –∫–æ–Ω—Ç–∞–∫—Ç—É: {contact.properties['messenger']}")
            elif contact.properties.get('messenger__cloned_'):
                lead.messenger = contact.properties['messenger__cloned_']
                print(f"–û–Ω–æ–≤–ª–µ–Ω–æ messenger –∑ –∫–æ–Ω—Ç–∞–∫—Ç—É (__cloned_): {contact.properties['messenger__cloned_']}")
            
            # –ú–∞–ø–∏–º–æ birthdate (—Å–ø–æ—á–∞—Ç–∫—É –±–µ–∑ __cloned_, –ø–æ—Ç—ñ–º –∑)
            print(f"üéÇ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞—Ç–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:")
            print(f"   birthdate: {contact.properties.get('birthdate')}")
            print(f"   birthdate__cloned_: {contact.properties.get('birthdate__cloned_')}")
            
            birth_date_value = None
            birth_date_source = None
            if contact.properties.get('birthdate'):
                birth_date_value = contact.properties['birthdate']
                birth_date_source = "birthdate"
            elif contact.properties.get('birthdate__cloned_'):
                birth_date_value = contact.properties['birthdate__cloned_']
                birth_date_source = "birthdate__cloned_"
            
            if birth_date_value:
                try:
                    from datetime import datetime
                    birth_date = datetime.strptime(birth_date_value, '%Y-%m-%d').date()
                    lead.birth_date = birth_date
                    print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –∑ {birth_date_source}: {birth_date_value} ‚Üí {birth_date}")
                except (ValueError, TypeError) as e:
                    print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –∑ –∫–æ–Ω—Ç–∞–∫—Ç—É: {birth_date_value} (–ø–æ–º–∏–ª–∫–∞: {e})")
            else:
                print(f"‚ö†Ô∏è –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ HubSpot")
            
            if contact.properties.get('company'):
                lead.company = contact.properties['company']
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –Ω–æ—Ç–∞—Ç–∫–∏ –≤ –ø–æ–ª—ñ lead.notes (—Å—Ç–∞—Ä–∏–π —Å–ø–æ—Å—ñ–±)
            if contact.properties.get('notes_last_contacted'):
                if not lead.notes or contact.properties['notes_last_contacted'] not in lead.notes:
                    lead.notes = (lead.notes or '') + '\n' + contact.properties['notes_last_contacted']
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —É–≥–æ–¥—É –∑ HubSpot
        if lead.hubspot_deal_id:
            print(f"–û—Ç—Ä–∏–º—É—î–º–æ —É–≥–æ–¥—É –∑ HubSpot: {lead.hubspot_deal_id}")
            deal = hubspot_client.crm.deals.basic_api.get_by_id(
                deal_id=lead.hubspot_deal_id,
                properties=[
                    "dealname", "dealstage", "amount", "closedate", "budget", "language", 
                    "source_channel", "deal_closed", "decline_reason", "purchase_reason__cloned_",
                    "property_type__cloned_", "property_status__cloned_", "purchase_reason",
                    "hubspot_owner_id", "purchase_country", "telegram", "messenger", "birthdate",
                    "responisble_agent", "from_agent_portal__name_"
                ]
            )
            print(f"–û—Ç—Ä–∏–º–∞–Ω–æ —É–≥–æ–¥—É –∑ HubSpot: {deal.properties}")
            
            if deal.properties:
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —É–≥–æ–¥–∏ –∑ HubSpot dealstage
                if deal.properties.get('dealstage'):
                    # –ú–∞–ø–∏–º–æ –≤—Å—ñ —Å—Ç–∞–¥—ñ—ó HubSpot (dealstage ID) –Ω–∞ –Ω–∞—à—ñ —Å—Ç–∞—Ç—É—Å–∏
                    stage_mapping = {
                        # –ù–æ–≤—ñ –∑–∞—è–≤–∫–∏ (–≤–∞–ª—ñ–¥–Ω–∏–π ID)
                        '3204738258': 'new',        # –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞
                        
                        # –ö–æ–Ω—Ç–∞–∫—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–≤–∞–ª—ñ–¥–Ω–∏–π ID)
                        '3204738259': 'contacted',  # –ö–æ–Ω—Ç–∞–∫—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
                        
                        # –ö–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω—ñ –ª—ñ–¥–∏ (–≤–∞–ª—ñ–¥–Ω—ñ ID)
                        '3204738261': 'qualified',  # –ö–≤–∞–ª—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–æ
                        '3204738262': 'qualified',  # –í—Å—Ç—Ä–µ—á–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞
                        '3204738265': 'qualified',  # –ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã
                        '3204738266': 'qualified',  # –ó–∞–¥–∞—Ç–æ–∫
                        
                        # –ó–∞–∫—Ä–∏—Ç—ñ —É–≥–æ–¥–∏ (–≤–∞–ª—ñ–¥–Ω–∏–π ID)
                        '3204738267': 'closed'      # –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞
                    }
                    
                    # –ú–∞–ø–ø—ñ–Ω–≥ ID —Å—Ç–∞–¥—ñ–π –Ω–∞ —ó—Ö –Ω–∞–∑–≤–∏ (—Ç—ñ–ª—å–∫–∏ –≤–∞–ª—ñ–¥–Ω—ñ ID)
                    stage_labels = {
                        '3204738258': '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞',
                        '3204738259': '–ö–æ–Ω—Ç–∞–∫—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
                        '3204738261': '–ù–∞–∑–Ω–∞—á–µ–Ω–∞ –≤—Å—Ç—Ä–µ—á–∞',
                        '3204738262': '–í—Å—Ç—Ä–µ—á–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞',
                        '3204738265': '–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã',
                        '3204738266': '–ó–∞–¥–∞—Ç–æ–∫',
                        '3204738267': '–°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞'
                    }
                    
                    hubspot_stage = deal.properties['dealstage']
                    print(f"üîÑ HubSpot dealstage: {hubspot_stage}")
                    
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É –Ω–∞–∑–≤—É —Å—Ç–∞–¥—ñ—ó –∑ HubSpot
                    if hubspot_stage in stage_labels:
                        lead.hubspot_stage_label = stage_labels[hubspot_stage]
                        print(f"   –°—Ç–∞–¥—ñ—è HubSpot: {lead.hubspot_stage_label}")
                    
                    if hubspot_stage in stage_mapping:
                        old_status = lead.status
                        lead.status = stage_mapping[hubspot_stage]
                        print(f"   –û–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å: {old_status} ‚Üí {lead.status}")
                    else:
                        print(f"‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π dealstage ID: {hubspot_stage}, —Å—Ç–∞—Ç—É—Å –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ")
                        # –õ–æ–≥—É—î–º–æ –Ω–µ–≤—ñ–¥–æ–º–∏–π dealstage –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –º–∞–ø–ø—ñ–Ω–≥
                        app.logger.warning(f"–ù–µ–≤—ñ–¥–æ–º–∏–π HubSpot dealstage: {hubspot_stage} –¥–ª—è –ª—ñ–¥–∞ {lead.id}")
                
                # –û–Ω–æ–≤–ª—é—î–º–æ —Å—É–º—É
                if deal.properties.get('amount'):
                    amount = deal.properties['amount']
                    # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ —á–∏—Å–ª–æ, —è–∫—â–æ —Ü–µ —Ä—è–¥–æ–∫
                    try:
                        amount = float(amount) if isinstance(amount, str) else amount
                        # –ú–∞–ø–∏–º–æ —Å—É–º—É –Ω–∞ –Ω–∞—à—ñ –±—é–¥–∂–µ—Ç–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
                        if amount <= 200000:
                            lead.budget = '–¥–æ 200–∫'
                        elif amount <= 500000:
                            lead.budget = '200–∫‚Äì500–∫'
                        elif amount <= 1000000:
                            lead.budget = '500–∫‚Äì1–º–ª–Ω'
                        else:
                            lead.budget = '1–º–ª–Ω+'
                    except (ValueError, TypeError):
                        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ —Å—É–º—É {amount} –≤ —á–∏—Å–ª–æ")
                
                # –û–Ω–æ–≤–ª—é—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ —É–≥–æ–¥–∏
                if deal.properties.get('budget'):
                    lead.budget = deal.properties['budget']
                
                if deal.properties.get('language'):
                    lead.communication_language = deal.properties['language']
                
                if deal.properties.get('source_channel'):
                    lead.source = deal.properties['source_channel']
                
                if deal.properties.get('decline_reason'):
                    lead.refusal_reason = deal.properties['decline_reason']
                
                # –ú–∞–ø–∏–º–æ purchase_reason (—Å–ø–æ—á–∞—Ç–∫—É –∑ __cloned_, –ø–æ—Ç—ñ–º –±–µ–∑)
                if deal.properties.get('purchase_reason__cloned_'):
                    lead.purchase_goal = deal.properties['purchase_reason__cloned_']
                elif deal.properties.get('purchase_reason'):
                    lead.purchase_goal = deal.properties['purchase_reason']
                
                if deal.properties.get('property_type__cloned_'):
                    lead.property_type = deal.properties['property_type__cloned_']
                
                if deal.properties.get('property_status__cloned_'):
                    # –¶–µ –ø–æ–ª–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ–≤'—è–∑–∞–Ω–µ –∑ object_type –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –ø–æ–ª–µ
                    lead.object_type = deal.properties['property_status__cloned_']
                
                # –û–Ω–æ–≤–ª—é—î–º–æ –∫—Ä–∞—ó–Ω—É –ø–æ–∫—É–ø–∫–∏
                if deal.properties.get('purchase_country'):
                    lead.country = deal.properties['purchase_country']
                
                # –û–Ω–æ–≤–ª—é—î–º–æ telegram –∑ —É–≥–æ–¥–∏ (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ, —è–∫—â–æ —î –≤ —É–≥–æ–¥—ñ)
                if deal.properties.get('telegram'):
                    lead.telegram_nickname = deal.properties['telegram']
                    print(f"–û–Ω–æ–≤–ª–µ–Ω–æ telegram –∑ —É–≥–æ–¥–∏: {deal.properties['telegram']}")
                
                # –û–Ω–æ–≤–ª—é—î–º–æ messenger –∑ —É–≥–æ–¥–∏ (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ, —è–∫—â–æ —î –≤ —É–≥–æ–¥—ñ)
                if deal.properties.get('messenger'):
                    lead.messenger = deal.properties['messenger']
                    print(f"–û–Ω–æ–≤–ª–µ–Ω–æ messenger –∑ —É–≥–æ–¥–∏: {deal.properties['messenger']}")
                
                # –û–Ω–æ–≤–ª—é—î–º–æ birthdate –∑ —É–≥–æ–¥–∏ (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ, —è–∫—â–æ —î –≤ —É–≥–æ–¥—ñ)
                if deal.properties.get('birthdate'):
                    try:
                        from datetime import datetime
                        birth_date = datetime.strptime(deal.properties['birthdate'], '%Y-%m-%d').date()
                        lead.birth_date = birth_date
                        print(f"–û–Ω–æ–≤–ª–µ–Ω–æ birthdate –∑ —É–≥–æ–¥–∏: {deal.properties['birthdate']}")
                    except (ValueError, TypeError):
                        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –∑ —É–≥–æ–¥–∏: {deal.properties['birthdate']}")
                
                # –û–Ω–æ–≤–ª—é—î–º–æ deal name –∑ HubSpot (—è–∫—â–æ —î)
                if deal.properties.get('dealname'):
                    lead.deal_name = deal.properties['dealname']
                    print(f"–û–Ω–æ–≤–ª–µ–Ω–æ deal_name –∑ HubSpot: {lead.deal_name}")
                
                # –û–Ω–æ–≤–ª—é—î–º–æ responisble_agent –∑ HubSpot
                if deal.properties.get('responisble_agent'):
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ HubSpot responsible agent –≤ notes
                    if not lead.notes or "HubSpot Responsible Agent:" not in lead.notes:
                        lead.notes = f"HubSpot Responsible Agent: {deal.properties['responisble_agent']}"
                    print(f"HubSpot –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π –∞–≥–µ–Ω—Ç: {deal.properties['responisble_agent']}")
                
                # –í–∏–≤–æ–¥–∏–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∞–≥–µ–Ω—Ç–∞ –∑ –ø–æ—Ä—Ç–∞–ª—É
                if deal.properties.get('from_agent_portal__name_'):
                    print(f"üë§ –ê–≥–µ–Ω—Ç –∑ –ø–æ—Ä—Ç–∞–ª—É: {deal.properties['from_agent_portal__name_']}")
                
                # –û–Ω–æ–≤–ª—é—î–º–æ deal owner (–≤–ª–∞—Å–Ω–∏–∫–∞ —É–≥–æ–¥–∏) - –∑–∞–≤–∂–¥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –∑ HubSpot
                if deal.properties.get('hubspot_owner_id'):
                    try:
                        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–ª–∞—Å–Ω–∏–∫–∞
                        owner = hubspot_client.crm.owners.owners_api.get_by_id(
                            owner_id=deal.properties['hubspot_owner_id']
                        )
                        if owner:
                            # –§–æ—Ä–º—É—î–º–æ —ñ–º'—è –≤–ª–∞—Å–Ω–∏–∫–∞
                            owner_name = ""
                            if owner.first_name and owner.last_name:
                                owner_name = f"{owner.first_name} {owner.last_name}"
                            elif owner.first_name:
                                owner_name = owner.first_name
                            elif owner.last_name:
                                owner_name = owner.last_name
                            elif owner.email:
                                # –Ø–∫—â–æ —ñ–º–µ–Ω –Ω–µ–º–∞—î, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ email
                                owner_name = owner.email
                            
                            if owner_name:
                                # –ó–∞–≤–∂–¥–∏ –æ–Ω–æ–≤–ª—é—î–º–æ HubSpot Deal Owner –≤ notes (–Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤–∂–µ —î)
                                import re
                                owner_pattern = r'HubSpot Deal Owner:\s*[^\n]*'
                                new_owner_text = f'HubSpot Deal Owner: {owner_name}'
                                
                                if lead.notes and re.search(owner_pattern, lead.notes):
                                    # –ó–∞–º—ñ–Ω—é—î–º–æ —Å—Ç–∞—Ä–µ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ –Ω–æ–≤–µ
                                    lead.notes = re.sub(owner_pattern, new_owner_text, lead.notes)
                                else:
                                    # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è
                                    if lead.notes:
                                        lead.notes = (lead.notes.rstrip() + "\n" + new_owner_text).strip()
                                    else:
                                        lead.notes = new_owner_text
                                
                                print(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ HubSpot –≤–ª–∞—Å–Ω–∏–∫–∞ —É–≥–æ–¥–∏: {owner_name}")
                                app.logger.info(f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ HubSpot –≤–ª–∞—Å–Ω–∏–∫–∞ —É–≥–æ–¥–∏ –¥–ª—è –ª—ñ–¥–∞ {lead.id}: {owner_name}")
                                
                                # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ agent_id –Ω–∞ –æ—Å–Ω–æ–≤—ñ HubSpot owner email
                                if owner.email:
                                    # –®—É–∫–∞—î–º–æ –∞–≥–µ–Ω—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º—ñ –ø–æ email
                                    agent_by_email = User.query.filter_by(email=owner.email.lower()).first()
                                    if agent_by_email and agent_by_email.id != lead.agent_id:
                                        print(f"üîÑ –ó–º—ñ–Ω–∞ –∞–≥–µ–Ω—Ç–∞: {lead.agent_id} ‚Üí {agent_by_email.id} ({owner.email})")
                                        old_agent_id = lead.agent_id
                                        lead.agent_id = agent_by_email.id
                                        app.logger.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ agent_id –¥–ª—è –ª—ñ–¥–∞ {lead.id}: {old_agent_id} ‚Üí {agent_by_email.id} (–∑ HubSpot)")
                                    elif not agent_by_email:
                                        print(f"‚ö†Ô∏è –ê–≥–µ–Ω—Ç –∑ email {owner.email} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ")
                                        app.logger.warning(f"‚ö†Ô∏è –ê–≥–µ–Ω—Ç –∑ email {owner.email} (HubSpot owner) –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ –¥–ª—è –ª—ñ–¥–∞ {lead.id}")
                    except Exception as e:
                        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–ª–∞—Å–Ω–∏–∫–∞ —É–≥–æ–¥–∏: {e}")
                        app.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è HubSpot owner –¥–ª—è –ª—ñ–¥–∞ {lead.id}: {e}")
        
        # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∑ HubSpot
        sync_activities_from_hubspot(lead)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
        lead.last_sync_at = get_ukraine_time()
        
        db.session.commit()
        print(f"–õ—ñ–¥ {lead.id} —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –∑ HubSpot")
        return True
        
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ª—ñ–¥–∞ {lead.id}: {e}")
        return False

def sync_all_leads_from_hubspot():
    """–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î –≤—Å—ñ –ª—ñ–¥—ñ –∑ HubSpot"""
    if not hubspot_client:
        return False
    
    leads = Lead.query.filter(Lead.hubspot_contact_id.isnot(None)).all()
    synced_count = 0
    
    for lead in leads:
        if sync_lead_from_hubspot(lead):
            synced_count += 1
    
    print(f"–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ {synced_count} –∑ {len(leads)} –ª—ñ–¥—ñ–≤")
    return synced_count > 0

def background_sync_task():
    """–§–æ–Ω–æ–≤–∞ –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –ª—ñ–¥—ñ–≤ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω (300 —Å–µ–∫—É–Ω–¥)"""
    print("üîÑ –ó–∞–ø—É—â–µ–Ω–æ —Ñ–æ–Ω–æ–≤—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é (–∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω)")
    app.logger.info("üîÑ –§–æ–Ω–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è HubSpot –∑–∞–ø—É—â–µ–Ω–∞ (—ñ–Ω—Ç–µ—Ä–≤–∞–ª: 5 —Ö–≤–∏–ª–∏–Ω)")
    
    while True:
        try:
            time.sleep(300)  # –ß–µ–∫–∞—î–º–æ 5 —Ö–≤–∏–ª–∏–Ω (300 —Å–µ–∫—É–Ω–¥) - –∑–º–µ–Ω—à—É—î–º–æ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ HubSpot API
            
            with app.app_context():
                if hubspot_client:
                    print("‚è∞ –ü–æ—á–∞—Ç–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó...")
                    sync_all_leads_from_hubspot()
                    print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                else:
                    print("‚ö†Ô∏è HubSpot API –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π, —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–ø—É—â–µ–Ω–∞")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ —Ñ–æ–Ω–æ–≤—ñ–π —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: {e}")
            traceback.print_exc()

def start_background_sync():
    """–ó–∞–ø—É—Å–∫–∞—î —Ñ–æ–Ω–æ–≤—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
    sync_thread = threading.Thread(target=background_sync_task, daemon=True)
    sync_thread.start()
    print("‚úÖ –§–æ–Ω–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–ø—É—â–µ–Ω–∞")

# –ú–∞—Ä—à—Ä—É—Ç–∏
@app.route('/')
def index():
    if current_user.is_authenticated:
        return redirect(url_for('dashboard'))
    return redirect(url_for('login'))

@app.route('/login', methods=['GET', 'POST'])
@limiter.limit("10 per minute")
def login():
    """–õ–æ–≥—ñ–Ω –∑ rate limiting (–º–∞–∫—Å–∏–º—É–º 10 —Å–ø—Ä–æ–± –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É)"""
    if current_user.is_authenticated:
        return redirect(url_for('dashboard'))
    
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        
        if username and password:
            user = User.query.filter_by(username=username).first()
            
            if user:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∞–∫—Ç–∏–≤–Ω–∏–π –∞–∫–∞—É–Ω—Ç
                if not user.is_active:
                    flash('–í–∞—à –∞–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
                    return render_template('login.html')
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –∞–∫–∞—É–Ω—Ç
                if user.is_account_locked():
                    flash('–í–∞—à –∞–∫–∞—É–Ω—Ç —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ –Ω–µ–≤–¥–∞–ª—ñ —Å–ø—Ä–æ–±–∏ –≤—Ö–æ–¥—É.')
                    return render_template('login.html')
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–∞—Ä–æ–ª—å
                if user.check_password(password):
                    # –£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥
                    user.last_login = get_ukraine_time()
                    user.reset_login_attempts()
                    db.session.commit()
                    login_user(user)
                    return redirect(url_for('dashboard'), code=302)
                else:
                    # –ù–µ–≤–¥–∞–ª–∏–π –≤—Ö—ñ–¥
                    user.increment_login_attempts()
                    db.session.commit()
                    flash('–ù–µ–≤—ñ—Ä–Ω–µ —ñ–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –ø–∞—Ä–æ–ª—å')
            else:
                flash('–ù–µ–≤—ñ—Ä–Ω–µ —ñ–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –ø–∞—Ä–æ–ª—å')
        else:
            flash('–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è')
    
    response = make_response(render_template('login.html'))
    response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
    response.headers['Pragma'] = 'no-cache'
    response.headers['Expires'] = '0'
    return response

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('index'))

@app.route('/profile')
@login_required
def profile():
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –∫–∞–±—ñ–Ω–µ—Ç—É"""
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    documents = UserDocument.query.filter_by(user_id=current_user.id).order_by(UserDocument.uploaded_at.desc()).all()
    
    # –î–ª—è –∞–¥–º—ñ–Ω–∞ –æ—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –π–æ–≥–æ –±—Ä–æ–∫–µ—Ä—ñ–≤
    brokers = []
    if current_user.role == 'admin':
        brokers = User.query.filter_by(admin_id=current_user.id, role='agent').order_by(User.created_at.desc()).all()
    
    return render_template('profile.html', documents=documents, brokers=brokers)

@app.route('/profile/update', methods=['POST'])
@login_required
def update_profile():
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        data = request.get_json()
        username = data.get('username')
        email = data.get('email')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ—Ä–æ–∂–Ω—ñ –ø–æ–ª—è
        if not username or not email:
            return jsonify({'success': False, 'message': '–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ'})
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –Ω–µ –∑–∞–π–Ω—è—Ç–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        existing_user = User.query.filter(User.username == username, User.id != current_user.id).first()
        if existing_user:
            return jsonify({'success': False, 'message': '–¶–µ —ñ–º\'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∂–µ –∑–∞–π–Ω—è—Ç–æ'})
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –Ω–µ –∑–∞–π–Ω—è—Ç–æ email
        existing_email = User.query.filter(User.email == email, User.id != current_user.id).first()
        if existing_email:
            return jsonify({'success': False, 'message': '–¶–µ–π email –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è'})
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
        current_user.username = username
        current_user.email = email
        db.session.commit()
        
        return jsonify({'success': True, 'message': '–ü—Ä–æ—Ñ—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ'})
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'})

@app.route('/api/profile/stats')
@login_required
def profile_stats():
    """API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ—ñ–ª—é"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª—ñ–¥—ñ–≤ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user_id = current_user.id
        
        # –î–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–∫–∞–∑—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if current_user.role == 'admin':
            leads_stats = {
                'new': Lead.query.filter_by(status='–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞').count(),
                'in_progress': Lead.query.filter(
                    Lead.status.in_(['–û–±—Ä–æ–±–∫–∞', '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ —ñ–Ω—Ç–µ—Ä–µ—Å', '–ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞–≤', '–£—Ç–æ—á–Ω–∏–ª–∏ –ø–æ—Ç—Ä–µ–±–∏'])
                ).count(),
                'converted': Lead.query.filter_by(status='–£–≥–æ–¥–∞').count(),
                'rejected': Lead.query.filter_by(status='–í—ñ–¥–º–æ–≤–∞').count()
            }
        else:
            # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ª—ñ–¥—ñ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –¥–ª—è –∞–≥–µ–Ω—Ç–∞
            leads_stats = {
                'new': Lead.query.filter_by(agent_id=user_id, status='–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞').count(),
                'in_progress': Lead.query.filter(
                    Lead.agent_id == user_id,
                    Lead.status.in_(['–û–±—Ä–æ–±–∫–∞', '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ —ñ–Ω—Ç–µ—Ä–µ—Å', '–ó–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞–≤', '–£—Ç–æ—á–Ω–∏–ª–∏ –ø–æ—Ç—Ä–µ–±–∏'])
                ).count(),
                'converted': Lead.query.filter_by(agent_id=user_id, status='–£–≥–æ–¥–∞').count(),
                'rejected': Lead.query.filter_by(agent_id=user_id, status='–í—ñ–¥–º–æ–≤–∞').count()
            }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å—ñ—ó –ø–æ —Ç–∏–∂–Ω—è—Ö (–æ—Å—Ç–∞–Ω–Ω—ñ 4 —Ç–∏–∂–Ω—ñ)
        from datetime import datetime, timedelta
        
        conversion_labels = []
        conversion_values = []
        
        for i in range(3, -1, -1):
            week_start = datetime.now() - timedelta(weeks=i+1)
            week_end = datetime.now() - timedelta(weeks=i)
            
            if current_user.role == 'admin':
                total_leads = Lead.query.filter(
                    Lead.created_at >= week_start,
                    Lead.created_at < week_end
                ).count()
                
                converted_leads = Lead.query.filter(
                    Lead.status == '–£–≥–æ–¥–∞',
                    Lead.created_at >= week_start,
                    Lead.created_at < week_end
                ).count()
            else:
                total_leads = Lead.query.filter(
                    Lead.agent_id == user_id,
                    Lead.created_at >= week_start,
                    Lead.created_at < week_end
                ).count()
                
                converted_leads = Lead.query.filter(
                    Lead.agent_id == user_id,
                    Lead.status == '–£–≥–æ–¥–∞',
                    Lead.created_at >= week_start,
                    Lead.created_at < week_end
                ).count()
            
            conversion_rate = (converted_leads / total_leads * 100) if total_leads > 0 else 0
            
            conversion_labels.append(f'–¢–∏–∂ {4-i}')
            conversion_values.append(round(conversion_rate, 1))
        
        conversion_stats = {
            'labels': conversion_labels,
            'values': conversion_values
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—ñ–Ω—Ç—ñ–≤
        next_level_points = 2000 if current_user.level == 'bronze' else (
            5000 if current_user.level == 'silver' else (
                10000 if current_user.level == 'gold' else 10000
            )
        )
        
        next_level_name = '–°—Ä—ñ–±–Ω–∏–π' if current_user.level == 'bronze' else (
            '–ó–æ–ª–æ—Ç–∏–π' if current_user.level == 'silver' else (
                '–ü–ª–∞—Ç–∏–Ω–æ–≤–∏–π' if current_user.level == 'gold' else '–ú–∞–∫—Å–∏–º—É–º'
            )
        )
        
        points_stats = {
            'current_points': current_user.points,
            'next_level_points': next_level_points,
            'next_level': next_level_name
        }
        
        return jsonify({
            'success': True,
            'leads_stats': leads_stats,
            'conversion_stats': conversion_stats,
            'points_stats': points_stats
        })
        
    except Exception as e:
        return jsonify({'success': False, 'message': f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'})

@app.route('/register', methods=['GET', 'POST'])
def register():
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    app.logger.info("=" * 80)
    app.logger.info(f"üîç REGISTER: –ó–∞–ø–∏—Ç –º–µ—Ç–æ–¥–æ–º {request.method}")
    
    if current_user.is_authenticated:
        app.logger.info(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π: {current_user.username}, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ dashboard")
        return redirect(url_for('dashboard'))
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤ –¥–ª—è –≤–∏–±–æ—Ä—É
    app.logger.info("üìã –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤...")
    admins = User.query.filter_by(role='admin').all()
    app.logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ–≤: {len(admins)}")
    for admin in admins:
        app.logger.info(f"   - {admin.username} (ID: {admin.id}, email: {admin.email})")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–æ—Ä–º—É —ñ –∑–∞–ø–æ–≤–Ω—é—î–º–æ choices –¥–ª—è admin_id
    app.logger.info("üìù –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–æ—Ä–º—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó...")
    form = RegistrationForm(request.form)
    app.logger.info(f"   Form data: {request.form.to_dict()}")
    
    # –ó–∞–ø–æ–≤–Ω—é—î–º–æ choices –¥–ª—è admin_id (0 –∑–∞–º—ñ—Å—Ç—å '' –¥–ª—è coerce=int)
    form.admin_id.choices = [(0, '-- –í–∏–±–µ—Ä—ñ—Ç—å –∞–¥–º—ñ–Ω–∞ --')] + [(admin.id, f"{admin.username} ({admin.email})") for admin in admins]
    app.logger.info(f"   Admin choices: {form.admin_id.choices}")
    
    if request.method == 'POST':
        app.logger.info("üì• POST –∑–∞–ø–∏—Ç - –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ñ–æ—Ä–º–∏...")
        app.logger.info(f"   username: {form.username.data}")
        app.logger.info(f"   email: {form.email.data}")
        app.logger.info(f"   admin_id: {form.admin_id.data}")
        app.logger.info(f"   password: {'*' * len(form.password.data) if form.password.data else 'None'}")
        app.logger.info(f"   confirm_password: {'*' * len(form.confirm_password.data) if form.confirm_password.data else 'None'}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é
        is_valid = form.validate()
        app.logger.info(f"‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–æ—Ä–º–∏: {'–ü–†–û–ô–î–ï–ù–û' if is_valid else '–ü–†–û–í–ê–õ–ï–ù–û'}")
        
        if not is_valid:
            app.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ñ–æ—Ä–º–∏:")
            for field, errors in form.errors.items():
                for error in errors:
                    app.logger.error(f"   {field}: {error}")
                    flash(f'–ü–æ–º–∏–ª–∫–∞ –ø–æ–ª—è {field}: {error}', 'error')
            return render_template('register.html', form=form, admins=admins)
        
        app.logger.info("‚úÖ –§–æ—Ä–º–∞ –≤–∞–ª—ñ–¥–Ω–∞, –ø–æ—á–∏–Ω–∞—î–º–æ –æ–±—Ä–æ–±–∫—É...")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º —ñ–º'—è–º –∞–±–æ email
        app.logger.info("üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...")
        existing_user = User.query.filter(
            (User.username == form.username.data) | 
            (User.email == form.email.data)
        ).first()
        
        if existing_user:
            app.logger.warning(f"‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º —ñ–º'—è–º –∞–±–æ email –≤–∂–µ —ñ—Å–Ω—É—î: {existing_user.username}")
            flash('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º —ñ–º\'—è–º –∞–±–æ email –≤–∂–µ —ñ—Å–Ω—É—î')
            return render_template('register.html', form=form, admins=admins)
        
        app.logger.info("‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —ñ—Å–Ω—É—î, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ...")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å –ø–∞—Ä–æ–ª—ñ
        if form.password.data != form.confirm_password.data:
            app.logger.error("‚ùå –ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å")
            flash('–ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å')
            return render_template('register.html', form=form, admins=admins)
        
        app.logger.info("‚úÖ –ü–∞—Ä–æ–ª—ñ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –≤–∏–±—Ä–∞–Ω–æ –∞–¥–º—ñ–Ω–∞
        if not form.admin_id.data or form.admin_id.data == 0:
            app.logger.error("‚ùå –ê–¥–º—ñ–Ω–∞ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ")
            flash('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –∞–¥–º—ñ–Ω–∞')
            return render_template('register.html', form=form, admins=admins)
        
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –≤–∏–±—Ä–∞–Ω–∏–π –∞–¥–º—ñ–Ω —ñ—Å–Ω—É—î
            app.logger.info(f"üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–¥–º—ñ–Ω–∞ –∑ ID: {form.admin_id.data}")
            admin = User.query.filter_by(id=form.admin_id.data, role='admin').first()
            if not admin:
                app.logger.error(f"‚ùå –ê–¥–º—ñ–Ω –∑ ID {form.admin_id.data} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
                flash('–í–∏–±—Ä–∞–Ω–∏–π –∞–¥–º—ñ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π')
                return render_template('register.html', form=form, admins=admins)
            
            app.logger.info(f"‚úÖ –ê–¥–º—ñ–Ω –∑–Ω–∞–π–¥–µ–Ω–æ: {admin.username}")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –∞–≥–µ–Ω—Ç)
            app.logger.info("üíæ –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...")
            new_user = User(
                username=form.username.data,
                email=form.email.data,
                role='agent',  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤—Å—ñ –Ω–æ–≤—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ - –∞–≥–µ–Ω—Ç–∏
                admin_id=form.admin_id.data  # –ü—Ä–∏–≤'—è–∑—É—î–º–æ –¥–æ –∞–¥–º—ñ–Ω–∞ (–û–ë–û–í'–Ø–ó–ö–û–í–û)
            )
            new_user.set_password(form.password.data)
            app.logger.info(f"   –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–æ: {new_user.username} (email: {new_user.email}, role: {new_user.role}, admin_id: {new_user.admin_id})")
            
            app.logger.info("üíæ –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –ë–î...")
            db.session.add(new_user)
            db.session.commit()
            app.logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î! User ID: {new_user.id}")
            
            flash(f'–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –í–∏ –ø—Ä–∏–≤\'—è–∑–∞–Ω—ñ –¥–æ –∞–¥–º—ñ–Ω–∞: {admin.username}. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.')
            app.logger.info(f"üéâ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {new_user.username}, –ê–¥–º—ñ–Ω: {admin.username}")
            app.logger.info("üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ login...")
            app.logger.info("=" * 80)
            return redirect(url_for('login'))
            
        except Exception as e:
            db.session.rollback()
            app.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {type(e).__name__}: {str(e)}")
            app.logger.error(f"   Traceback: {traceback.format_exc()}")
            flash(f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {str(e)}')
            app.logger.info("=" * 80)
            return render_template('register.html', form=form, admins=admins)
    
    app.logger.info("üìÑ –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ñ–æ—Ä–º—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó (GET –∑–∞–ø–∏—Ç)")
    app.logger.info("=" * 80)
    return render_template('register.html', form=form, admins=admins)

@app.route('/request_verification', methods=['POST'])
@login_required
def request_verification():
    """–ó–∞–ø–∏—Ç –Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é –≤—ñ–¥ –∞–≥–µ–Ω—Ç–∞"""
    if current_user.role == 'admin':
        return jsonify({'success': False, 'message': '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –Ω–µ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó'})
    
    if current_user.verification_requested:
        return jsonify({'success': False, 'message': '–í–∏ –≤–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞–ø–∏—Ç –Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é'})
    
    try:
        current_user.verification_requested = True
        current_user.verification_request_date = get_ukraine_time()
        db.session.commit()
        
        return jsonify({'success': True, 'message': '–ó–∞–ø–∏—Ç –Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é –ø–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ'})
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'})

@app.route('/close_deal/<int:lead_id>', methods=['POST'])
@login_required
def close_deal(lead_id):
    """–ó–∞–∫—Ä–∏—Ç—Ç—è —É–≥–æ–¥–∏ —Ç–∞ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –ø–æ—ñ–Ω—Ç—ñ–≤"""
    lead = Lead.query.get_or_404(lead_id)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ –ª—ñ–¥–∞
    if current_user.role == 'agent' and lead.agent_id != current_user.id:
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'})
    
    try:
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ª—ñ–¥–∞
        lead.status = 'closed'
        lead.notes = (lead.notes or '') + f'\n[–£–≥–æ–¥–∞ –∑–∞–∫—Ä–∏—Ç–∞ {get_ukraine_time().strftime("%d.%m.%Y %H:%M")}]'
        
        # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ—ñ–Ω—Ç–∏ –∑–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è —É–≥–æ–¥–∏
        agent = User.query.get(lead.agent_id)
        if agent:
            agent.add_points(1000)  # 1000 –ø–æ—ñ–Ω—Ç—ñ–≤ –∑–∞ –∑–∞–∫—Ä–∏—Ç—É —É–≥–æ–¥—É
            agent.closed_deals += 1
            print(f"–ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ 1000 –ø–æ—ñ–Ω—Ç—ñ–≤ –∞–≥–µ–Ω—Ç—É {agent.username} –∑–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è —É–≥–æ–¥–∏")
        
        db.session.commit()
        
        return jsonify({
            'success': True, 
            'message': '–£–≥–æ–¥–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞–∫—Ä–∏—Ç–∞! –ù–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ 1000 –ø–æ—ñ–Ω—Ç—ñ–≤.',
            'new_points': agent.points if agent else 0
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'})

@app.route('/delete_lead/<int:lead_id>', methods=['DELETE'])
@login_required
def delete_lead(lead_id):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è –ª—ñ–¥–∞"""
    lead = Lead.query.get_or_404(lead_id)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ –ª—ñ–¥–∞
    if current_user.role == 'agent' and lead.agent_id != current_user.id:
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'})
    
    try:
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤'—è–∑–∞–Ω—ñ –∑–∞–ø–∏—Å–∏
        Activity.query.filter_by(lead_id=lead_id).delete()
        
        # –í–∏–¥–∞–ª—è—î–º–æ –ª—ñ–¥
        lead_name = lead.deal_name
        db.session.delete(lead)
        db.session.commit()
        
        return jsonify({
            'success': True, 
            'message': f'–õ—ñ–¥ "{lead_name}" —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.'
        })
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'})

@app.route('/admin/verification')
@login_required
def admin_verification():
    """–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∞–≥–µ–Ω—Ç—ñ–≤"""
    if current_user.role != 'admin':
        flash('–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ')
        return redirect(url_for('dashboard'))
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∞–≥–µ–Ω—Ç—ñ–≤ (—Å–æ—Ä—Ç—É—î–º–æ –∑–∞ –¥–∞—Ç–æ—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è, –Ω–∞–π–Ω–æ–≤—ñ—à—ñ –∑–≤–µ—Ä—Ö—É)
    all_agents = User.query.filter_by(role='agent').order_by(User.created_at.desc()).all()
    pending_requests = [agent for agent in all_agents if agent.verification_requested and not agent.is_verified]
    verified_agents = [agent for agent in all_agents if agent.is_verified]
    unverified_agents = [agent for agent in all_agents if not agent.verification_requested and not agent.is_verified]
    total_agents = len(all_agents)
    
    return render_template('admin_verification.html', 
                         all_agents=all_agents,
                         pending_requests=pending_requests,
                         verified_agents=verified_agents,
                         unverified_agents=unverified_agents,
                         total_agents=total_agents)

@app.route('/admin/verify_agent', methods=['POST'])
@login_required
def admin_verify_agent():
    """–í–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –∞–±–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –∞–≥–µ–Ω—Ç–∞"""
    if current_user.role != 'admin':
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'})
    
    data = request.get_json()
    agent_id = data.get('agent_id')
    approve = data.get('approve', True)
    commission = data.get('commission')
    
    try:
        agent = User.query.get(agent_id)
        if not agent or agent.role != 'agent':
            return jsonify({'success': False, 'message': '–ê–≥–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'})
        
        if approve:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–æ–º—ñ—Å—ñ—ó –ø—Ä–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
            if commission is None:
                return jsonify({'success': False, 'message': '–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∫–æ–º—ñ—Å—ñ—é –ø–µ—Ä–µ–¥ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—î—é'})
            
            try:
                commission = float(commission)
                if commission < 0 or commission > 100:
                    return jsonify({'success': False, 'message': '–ö–æ–º—ñ—Å—ñ—è –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 0% –¥–æ 100%'})
            except ValueError:
                return jsonify({'success': False, 'message': '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º—ñ—Å—ñ—ó'})
            
            agent.commission = commission
            agent.is_verified = True
            agent.verification_requested = False
            message = f'–ê–≥–µ–Ω—Ç {agent.username} —É—Å–ø—ñ—à–Ω–æ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –∑ –∫–æ–º—ñ—Å—ñ—î—é {commission}%'
        else:
            agent.is_verified = False
            agent.verification_requested = False
            message = f'–ó–∞–ø–∏—Ç –Ω–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é –≤—ñ–¥ –∞–≥–µ–Ω—Ç–∞ {agent.username} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ'
        
        db.session.commit()
        return jsonify({'success': True, 'message': message})
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'})

@app.route('/admin/agent_details/<int:agent_id>')
@login_required
def admin_agent_details(agent_id):
    """–î–µ—Ç–∞–ª—ñ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∞–¥–º—ñ–Ω–∞"""
    if current_user.role != 'admin':
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'})
    
    try:
        agent = User.query.get(agent_id)
        if not agent or agent.role != 'agent':
            return jsonify({'success': False, 'message': '–ê–≥–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'})
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ª—ñ–¥–∏ –∞–≥–µ–Ω—Ç–∞
        leads = Lead.query.filter_by(agent_id=agent_id).all()
        
        html = f"""
        <div class="row">
            <div class="col-md-6">
                <h6><i class="fas fa-user"></i> –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è</h6>
                <table class="table table-sm">
                    <tr><td><strong>–Ü–º'—è:</strong></td><td>{agent.username}</td></tr>
                    <tr><td><strong>Email:</strong></td><td>{agent.email}</td></tr>
                    <tr><td><strong>–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:</strong></td><td>{agent.created_at.strftime('%d.%m.%Y %H:%M')}</td></tr>
                    <tr><td><strong>–°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:</strong></td><td>
                        {'<span class="badge bg-success">–í–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π</span>' if agent.is_verified else 
                         '<span class="badge bg-warning">–û—á—ñ–∫—É—î</span>' if agent.verification_requested else 
                         '<span class="badge bg-secondary">–ù–µ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π</span>'}
                    </td></tr>
                </table>
            </div>
            <div class="col-md-6">
                <h6><i class="fas fa-chart-bar"></i> –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h6>
                <table class="table table-sm">
                    <tr><td><strong>–†—ñ–≤–µ–Ω—å:</strong></td><td>{agent.get_level_display_name()}</td></tr>
                    <tr><td><strong>–ü–æ—ñ–Ω—Ç–∏:</strong></td><td>{agent.points}</td></tr>
                    <tr><td><strong>–õ—ñ–¥—ñ–≤:</strong></td><td>{agent.total_leads}</td></tr>
                    <tr><td><strong>–ó–∞–∫—Ä–∏—Ç–∏—Ö —É–≥–æ–¥:</strong></td><td>{agent.closed_deals}</td></tr>
                    <tr><td><strong>–ö–æ–º—ñ—Å—ñ—è:</strong></td><td>{agent.get_commission_rate()}%</td></tr>
                </table>
            </div>
        </div>
        <div class="row mt-3">
            <div class="col-12">
                <h6><i class="fas fa-list"></i> –û—Å—Ç–∞–Ω–Ω—ñ –ª—ñ–¥–∏</h6>
                <div class="table-responsive">
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>–ù–∞–∑–≤–∞ —É–≥–æ–¥–∏</th>
                                <th>Email</th>
                                <th>–°—Ç–∞—Ç—É—Å</th>
                                <th>–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è</th>
                            </tr>
                        </thead>
                        <tbody>
        """
        
        for lead in leads[:10]:  # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 10 –ª—ñ–¥—ñ–≤
            html += f"""
                            <tr>
                                <td>{lead.id}</td>
                                <td>{lead.deal_name}</td>
                                <td>{lead.email}</td>
                                <td><span class="badge bg-{'success' if lead.status == 'closed' else 'primary'}">{lead.status}</span></td>
                                <td>{lead.created_at.strftime('%d.%m.%Y') if lead.created_at else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}</td>
                            </tr>
            """
        
        html += """
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        """
        
        return jsonify({'success': True, 'html': html})
        
    except Exception as e:
        return jsonify({'success': False, 'message': f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'})

@app.route('/dashboard_test')
@login_required
def dashboard_test():
    return render_template('dashboard_test.html')

@app.route('/dashboard')
@login_required
def dashboard():
    # ‚ö° –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –í–∏–¥–∞–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –∑ HubSpot
    # –¢–µ–ø–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –æ–∫—Ä–µ–º—É –∫–Ω–æ–ø–∫—É
    
    # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
    from sqlalchemy import func, case
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –∑ URL
    sort_by = request.args.get('sort_by', 'updated_at')  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —Å–æ—Ä—Ç—É—î–º–æ –ø–æ –¥–∞—Ç—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    order = request.args.get('order', 'desc')  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –≤—ñ–¥ –Ω–æ–≤–∏—Ö –¥–æ —Å—Ç–∞—Ä–∏—Ö
    page = request.args.get('page', 1, type=int)  # –ù–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    per_page = 20  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ª—ñ–¥—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
    
    # –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –∑–∞–ø–∏—Ç: –æ—Ç—Ä–∏–º—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ª—ñ–¥–∏
    if current_user.role == 'admin':
        # –ê–¥–º—ñ–Ω –±–∞—á–∏—Ç—å —Å–≤–æ—ó –≤–ª–∞—Å–Ω—ñ –ª—ñ–¥–∏ + –ª—ñ–¥–∏ —Å–≤–æ—ó—Ö –±—Ä–æ–∫–µ—Ä—ñ–≤
        broker_ids = [broker.id for broker in User.query.filter_by(admin_id=current_user.id, role='agent').all()]
        # –î–æ–¥–∞—î–º–æ ID —Å–∞–º–æ–≥–æ –∞–¥–º—ñ–Ω–∞ –¥–æ —Å–ø–∏—Å–∫—É
        all_agent_ids = broker_ids + [current_user.id]
        leads_query = Lead.query.filter(Lead.agent_id.in_(all_agent_ids))
    else:
        leads_query = Lead.query.filter_by(agent_id=current_user.id)
    
    # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
    if sort_by == 'status':
        # –î–ª—è —Å—Ç–∞—Ç—É—Å—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ custom –ø–æ—Ä—è–¥–æ–∫: new -> contacted -> qualified -> closed
        status_order = case(
            (Lead.status == 'new', 1),
            (Lead.status == 'contacted', 2),
            (Lead.status == 'qualified', 3),
            (Lead.status == 'closed', 4),
            else_=5
        )
        if order == 'asc':
            leads_query = leads_query.order_by(status_order.asc())
        else:
            leads_query = leads_query.order_by(status_order.desc())
    elif sort_by == 'updated_at':
        if order == 'asc':
            leads_query = leads_query.order_by(Lead.updated_at.asc())
        else:
            leads_query = leads_query.order_by(Lead.updated_at.desc())
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ª—ñ–¥–∏ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
    pagination = leads_query.paginate(page=page, per_page=per_page, error_out=False)
    leads = pagination.items
    
    # ‚ö° –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ SQL –∞–≥—Ä–µ–≥–∞—Ü—ñ—é –∑–∞–º—ñ—Å—Ç—å Python —Ü–∏–∫–ª—ñ–≤
    # –ë–∞–∑–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –º–µ—Ç—Ä–∏–∫
    if current_user.role == 'admin':
        # –ú–µ—Ç—Ä–∏–∫–∏ –¢–Ü–õ–¨–ö–ò –¥–ª—è –ª—ñ–¥—ñ–≤ –±—Ä–æ–∫–µ—Ä—ñ–≤ –∞–¥–º—ñ–Ω–∞
        if broker_ids:
            metrics_query = db.session.query(
                func.count(Lead.id).label('total_leads'),
                func.count(case((Lead.status.in_(['new', 'contacted', 'qualified']), 1))).label('active_leads'),
                func.count(case((Lead.status == 'closed', 1))).label('closed_leads'),
                func.count(case((Lead.is_transferred == True, 1))).label('transferred_leads')
            ).filter(Lead.agent_id.in_(broker_ids))
        else:
            # –Ø–∫—â–æ –Ω–µ–º–∞—î –±—Ä–æ–∫–µ—Ä—ñ–≤ - –Ω—É–ª—å–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏
            metrics_query = db.session.query(
                func.count(Lead.id).label('total_leads'),
                func.count(case((Lead.status.in_(['new', 'contacted', 'qualified']), 1))).label('active_leads'),
                func.count(case((Lead.status == 'closed', 1))).label('closed_leads'),
                func.count(case((Lead.is_transferred == True, 1))).label('transferred_leads')
            ).filter(Lead.id == -1)
    else:
        metrics_query = db.session.query(
            func.count(Lead.id).label('total_leads'),
            func.count(case((Lead.status.in_(['new', 'contacted', 'qualified']), 1))).label('active_leads'),
            func.count(case((Lead.status == 'closed', 1))).label('closed_leads'),
            func.count(case((Lead.is_transferred == True, 1))).label('transferred_leads')
        ).filter(Lead.agent_id == current_user.id)
    
    result = metrics_query.first()
    
    total_leads = result.total_leads or 0
    active_leads = result.active_leads or 0
    closed_leads = result.closed_leads or 0
    transferred_leads = result.transferred_leads or 0
    
    # –°—É–º–∞ –±—é–¥–∂–µ—Ç—ñ–≤ (–ø–æ—Ç—Ä–µ–±—É—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö, –±–æ budget - —Å—Ç—Ä–æ–∫–∞)
    total_budget = sum(get_budget_value(lead.budget) for lead in leads)
    avg_budget = total_budget / total_leads if total_leads > 0 else 0
    
    # –ö–æ–Ω–≤–µ—Ä—Å—ñ—è (–≤—ñ–¥—Å–æ—Ç–æ–∫ –∑–∞–∫—Ä–∏—Ç–∏—Ö –ª—ñ–¥—ñ–≤)
    conversion_rate = (closed_leads / total_leads * 100) if total_leads > 0 else 0
    
    # –¶—ñ–ª—å: 10,000 –ø–æ—ñ–Ω—Ç—ñ–≤
    target_points = 10000
    goal_percentage = min(100, (current_user.points / target_points * 100)) if target_points > 0 else 0
    
    metrics = {
        'total_leads': total_leads,
        'active_leads': active_leads,
        'closed_leads': closed_leads,
        'transferred_leads': transferred_leads,
        'total_budget': total_budget,
        'avg_budget': avg_budget,
        'conversion_rate': conversion_rate,
        'goal_percentage': goal_percentage
    }
    
    return render_template('dashboard.html', leads=leads, metrics=metrics, sort_by=sort_by, order=order, pagination=pagination)

@app.route('/add_lead', methods=['GET', 'POST'])
@login_required
def add_lead():
    form = LeadForm(request.form)
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ agent_id –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if current_user.role == 'agent':
        form.agent_id.data = current_user.id
    elif current_user.role == 'admin':
        # –î–ª—è –∞–¥–º—ñ–Ω–∞ –º–æ–∂–Ω–∞ –≤–∏–±—Ä–∞—Ç–∏ –∞–≥–µ–Ω—Ç–∞, –∞–ª–µ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        form.agent_id.data = current_user.id
    
    # === –î–ï–¢–ê–õ–¨–ù–ï –õ–û–ì–£–í–ê–ù–ù–Ø –î–õ–Ø –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ò ===
    app.logger.info("=" * 80)
    app.logger.info(f"üîç ADD_LEAD: –ó–∞–ø–∏—Ç –º–µ—Ç–æ–¥–æ–º {request.method}")
    app.logger.info(f"üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: {current_user.username} (ID: {current_user.id}, role: {current_user.role})")
    
    if request.method == 'POST':
        app.logger.info(f"üìù –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ —Ñ–æ—Ä–º–∏:")
        for key, value in request.form.items():
            # –ù–µ –ª–æ–≥—É—î–º–æ —á—É—Ç–ª–∏–≤—ñ –¥–∞–Ω—ñ –ø–æ–≤–Ω—ñ—Å—Ç—é
            if key in ['email', 'phone']:
                app.logger.info(f"   {key}: {value[:3]}...{value[-3:] if len(value) > 6 else ''}")
            else:
                app.logger.info(f"   {key}: {value}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é —Ñ–æ—Ä–º–∏
        is_valid = form.validate()
        app.logger.info(f"‚úÖ –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–æ—Ä–º–∏: {'–ü–†–û–ô–î–ï–ù–û' if is_valid else '–ü–†–û–í–ê–õ–ï–ù–û'}")
        
        if not is_valid:
            app.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ñ–æ—Ä–º–∏:")
            for field, errors in form.errors.items():
                for error in errors:
                    app.logger.error(f"   {field}: {error}")
                    # –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                    flash(f'–ü–æ–º–∏–ª–∫–∞ –ø–æ–ª—è {field}: {error}', 'error')
    
    if request.method == 'POST' and form.validate():
        app.logger.info("‚úÖ –§–æ—Ä–º–∞ –≤–∞–ª—ñ–¥–Ω–∞, –ø–æ—á–∏–Ω–∞—î–º–æ –æ–±—Ä–æ–±–∫—É...")
        try:
            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É
            phone_number = form.phone.data
            app.logger.info(f"üìû –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone_number[:5]}...")
            try:
                parsed_number = phonenumbers.parse(phone_number, None)
                if not phonenumbers.is_valid_number(parsed_number):
                    app.logger.error(f"‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone_number}")
                    flash('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É', 'error')
                    return redirect(url_for('add_lead'))
                formatted_phone = phonenumbers.format_number(parsed_number, phonenumbers.PhoneNumberFormat.INTERNATIONAL)
                app.logger.info(f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ: {formatted_phone}")
            except phonenumbers.NumberParseException as e:
                app.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –Ω–æ–º–µ—Ä–∞: {e}")
                flash('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É', 'error')
                return redirect(url_for('add_lead'))
            
            # ‚ö° –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –°–ø–æ—á–∞—Ç–∫—É –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ª—ñ–¥ –≤ –ª–æ–∫–∞–ª—å–Ω—ñ–π –ë–î –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
            # –ü–æ—Ç—ñ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –∑ HubSpot
            
            # –û–±—Ä–æ–±–∫–∞ –¥–∞—Ç–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
            birth_date_obj = None
            if request.form.get('birth_date'):
                try:
                    from datetime import datetime
                    birth_date_obj = datetime.strptime(request.form.get('birth_date'), '%Y-%m-%d').date()
                    app.logger.info(f"üìÖ –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {birth_date_obj}")
                except (ValueError, TypeError) as e:
                    app.logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞—Ç–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {e}")
                    pass
            
            app.logger.info("üíæ –°—Ç–≤–æ—Ä—é—î–º–æ –ª—ñ–¥ —É –ª–æ–∫–∞–ª—å–Ω—ñ–π –ë–î...")
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ª—ñ–¥ –ª–æ–∫–∞–ª—å–Ω–æ
            lead = Lead(
                agent_id=current_user.id,
                deal_name=form.deal_name.data,
                email=form.email.data,
                phone=formatted_phone,
                budget=form.budget.data,
                notes=form.notes.data,
                second_phone=request.form.get('second_phone', '').strip() or None,
                company=request.form.get('company', '').strip() or None,
                telegram_nickname=request.form.get('telegram_nickname', '').strip() or None,
                messenger=request.form.get('messenger', '').strip() or None,
                birth_date=birth_date_obj,
                hubspot_contact_id=None,
                hubspot_deal_id=None
            )
            
            db.session.add(lead)
            app.logger.info(f"‚úÖ –õ—ñ–¥ –¥–æ–¥–∞–Ω–æ –¥–æ —Å–µ—Å—ñ—ó –ë–î")
            
            # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ—ñ–Ω—Ç–∏ –∑–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª—ñ–¥–∞
            agent = User.query.get(form.agent_id.data)
            if agent:
                app.logger.info(f"üéØ –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ 100 –ø–æ—ñ–Ω—Ç—ñ–≤ –∞–≥–µ–Ω—Ç—É {agent.username}")
                agent.add_points(100)  # 100 –ø–æ—ñ–Ω—Ç—ñ–≤ –∑–∞ –ª—ñ–¥
                agent.total_leads += 1
            
            # –ö–æ–º—ñ—Ç–∏–º–æ –∑–º—ñ–Ω–∏ –≤ –ë–î –ü–ï–†–ï–î HubSpot –≤–∏–∫–ª–∏–∫–∞–º–∏
            app.logger.info("üíæ –ö–æ–º—ñ—Ç–∏–º–æ –∑–º—ñ–Ω–∏ –≤ –ë–î...")
            db.session.commit()
            app.logger.info(f"‚úÖ –õ—ñ–¥ #{lead.id} —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ª–æ–∫–∞–ª—å–Ω—ñ–π –ë–î!")
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ HubSpot ID —è–∫ None
            hubspot_contact_id = None
            hubspot_deal_id = None
            hubspot_sync_success = False
            
            # –¢–µ–ø–µ—Ä –ø—Ä–æ–±—É—î–º–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –∑ HubSpot (–Ω–µ –±–ª–æ–∫—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ)
            if hubspot_client:
                print(f"=== –ü–û–ß–ê–¢–û–ö –°–¢–í–û–†–ï–ù–ù–Ø –ö–û–ù–¢–ê–ö–¢–£ –í HUBSPOT ===")
                print(f"Email: {form.email.data}")
                print(f"Deal name: {form.deal_name.data}")
                print(f"Phone: {formatted_phone}")
                print(f"Budget: {form.budget.data}")
                print(f"HubSpot client: {hubspot_client}")
                try:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–æ–Ω—Ç–∞–∫—Ç –∑ —Ç–∞–∫–∏–º email
                    from hubspot.crm.contacts import SimplePublicObjectInput
                    
                    try:
                        # –®—É–∫–∞—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –∫–æ–Ω—Ç–∞–∫—Ç –∑–∞ email (—è–∫—â–æ –≤—ñ–Ω –≤–∫–∞–∑–∞–Ω–∏–π)
                        print(f"=== –ü–û–®–£–ö –Ü–°–ù–£–Æ–ß–û–ì–û –ö–û–ù–¢–ê–ö–¢–£ ===")
                        from hubspot.crm.contacts import PublicObjectSearchRequest
                        
                        existing_contacts = None
                        if form.email.data and form.email.data.strip():
                            print(f"–ü–æ—à—É–∫ –∑–∞ email: {form.email.data}")
                            search_request = PublicObjectSearchRequest(
                                query=form.email.data,
                                properties=["email", "firstname", "lastname"],
                                limit=1
                            )
                            existing_contacts = hubspot_client.crm.contacts.search_api.do_search(
                                public_object_search_request=search_request
                            )
                            print(f"–ü–æ—à—É–∫ –∫–æ–Ω—Ç–∞–∫—Ç—É –∑–∞ email {form.email.data}: –∑–Ω–∞–π–¥–µ–Ω–æ {len(existing_contacts.results)} –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤")
                            if existing_contacts.results:
                                print(f"–ó–Ω–∞–π–¥–µ–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç: ID={existing_contacts.results[0].id}, properties={existing_contacts.results[0].properties}")
                        else:
                            print(f"Email –Ω–µ –≤–∫–∞–∑–∞–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç —Ç—ñ–ª—å–∫–∏ –∑ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º")
                        
                        if existing_contacts and existing_contacts.results:
                            # –ö–æ–Ω—Ç–∞–∫—Ç —ñ—Å–Ω—É—î, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ
                            hubspot_contact_id = str(existing_contacts.results[0].id)
                            print(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á–∏–π HubSpot –∫–æ–Ω—Ç–∞–∫—Ç: {hubspot_contact_id}")
                        else:
                            # –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
                            print(f"=== –°–¢–í–û–†–ï–ù–ù–Ø –ù–û–í–û–ì–û –ö–û–ù–¢–ê–ö–¢–£ ===")
                            print(f"–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π")
                            contact_properties = {
                                "phone": formatted_phone,
                                "firstname": form.deal_name.data.split()[0] if form.deal_name.data.split() else "Lead",
                                "lastname": " ".join(form.deal_name.data.split()[1:]) if len(form.deal_name.data.split()) > 1 else "Client"
                            }
                            
                            # –î–æ–¥–∞—î–º–æ email —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—ñ–Ω –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π
                            if form.email.data and form.email.data.strip():
                                contact_properties["email"] = form.email.data.strip()
                            
                            # –î–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ª—è, —è–∫—â–æ –≤–æ–Ω–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ
                            if request.form.get('second_phone', '').strip():
                                contact_properties["phone_number_1"] = request.form.get('second_phone').strip()
                            if request.form.get('company', '').strip():
                                contact_properties["company"] = request.form.get('company').strip()
                            if request.form.get('telegram_nickname', '').strip():
                                contact_properties["telegram"] = request.form.get('telegram_nickname').strip()
                            if request.form.get('messenger', '').strip():
                                contact_properties["messenger"] = request.form.get('messenger').strip()
                            if request.form.get('birth_date', '').strip():
                                contact_properties["birthdate"] = request.form.get('birth_date').strip()
                            
                            contact_input = SimplePublicObjectInput(properties=contact_properties)
                            hubspot_contact = hubspot_client.crm.contacts.basic_api.create(contact_input)
                            hubspot_contact_id = str(hubspot_contact.id)
                            print(f"HubSpot –∫–æ–Ω—Ç–∞–∫—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ: {hubspot_contact_id}")
                            
                    except Exception as search_error:
                        print(f"=== –ü–û–ú–ò–õ–ö–ê –ü–û–®–£–ö–£ –ö–û–ù–¢–ê–ö–¢–£ ===")
                        print(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∫–æ–Ω—Ç–∞–∫—Ç—É: {search_error}")
                        print(f"–¢–∏–ø –ø–æ–º–∏–ª–∫–∏: {type(search_error).__name__}")
                        print(f"Email: {form.email.data}")
                        traceback.print_exc()
                        # –Ø–∫—â–æ –ø–æ—à—É–∫ –Ω–µ –≤–¥–∞–≤—Å—è, —Å–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç
                        try:
                            contact_properties = {
                                "phone": formatted_phone,
                                "firstname": form.deal_name.data.split()[0] if form.deal_name.data.split() else "Lead",
                                "lastname": " ".join(form.deal_name.data.split()[1:]) if len(form.deal_name.data.split()) > 1 else "Client"
                            }
                            
                            # –î–æ–¥–∞—î–º–æ email —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—ñ–Ω –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–π
                            if form.email.data and form.email.data.strip():
                                contact_properties["email"] = form.email.data.strip()
                            
                            # –î–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–ª—è, —è–∫—â–æ –≤–æ–Ω–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ
                            if request.form.get('second_phone', '').strip():
                                contact_properties["phone_number_1"] = request.form.get('second_phone').strip()
                            if request.form.get('company', '').strip():
                                contact_properties["company"] = request.form.get('company').strip()
                            if request.form.get('telegram_nickname', '').strip():
                                contact_properties["telegram"] = request.form.get('telegram_nickname').strip()
                            if request.form.get('messenger', '').strip():
                                contact_properties["messenger"] = request.form.get('messenger').strip()
                            if request.form.get('birth_date', '').strip():
                                contact_properties["birthdate"] = request.form.get('birth_date').strip()
                            
                            contact_input = SimplePublicObjectInput(properties=contact_properties)
                            hubspot_contact = hubspot_client.crm.contacts.basic_api.create(contact_input)
                            hubspot_contact_id = str(hubspot_contact.id)
                            print(f"HubSpot –∫–æ–Ω—Ç–∞–∫—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ: {hubspot_contact_id}")
                        except Exception as create_error:
                            print(f"=== –ü–û–ú–ò–õ–ö–ê –°–¢–í–û–†–ï–ù–ù–Ø –ö–û–ù–¢–ê–ö–¢–£ ===")
                            print(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É: {create_error}")
                            print(f"–¢–∏–ø –ø–æ–º–∏–ª–∫–∏: {type(create_error).__name__}")
                            print(f"Email: {form.email.data}")
                            print(f"Phone: {formatted_phone}")
                            traceback.print_exc()
                            # –õ–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫—É, –∞–ª–µ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ä–æ–±–æ—Ç—É (–ª—ñ–¥ –≤–∂–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –≤ –ë–î)
                            app.logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è HubSpot –∫–æ–Ω—Ç–∞–∫—Ç—É: {create_error}")
                            # –ù–µ –ø—Ä–æ–∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É –¥–∞–ª—ñ - –ª—ñ–¥ –≤–∂–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –ª–æ–∫–∞–ª—å–Ω–æ
                    
                    # –°—Ç–≤–æ—Ä—é—î–º–æ deal –≤ HubSpot (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∫–æ–Ω—Ç–∞–∫—Ç —Å—Ç–≤–æ—Ä–µ–Ω–∏–π)
                    if hubspot_contact_id:
                        print(f"=== –°–¢–í–û–†–ï–ù–ù–Ø –£–ì–û–î–ò –í HUBSPOT ===")
                        print(f"–°—Ç–≤–æ—Ä—é—î–º–æ —É–≥–æ–¥—É –≤ HubSpot: {form.deal_name.data}")
                        print(f"–ö–æ–Ω—Ç–∞–∫—Ç ID: {hubspot_contact_id}")
                        try:
                            from hubspot.crm.deals import SimplePublicObjectInput as DealInput
                            
                            # –û—Ç—Ä–∏–º—É—î–º–æ HubSpot owner ID –¥–ª—è –∞–≥–µ–Ω—Ç–∞
                            hubspot_owner_id = None
                            agent = User.query.get(form.agent_id.data) if form.agent_id.data else current_user
                            if agent and hubspot_client:
                                try:
                                    # –®—É–∫–∞—î–º–æ owner –≤ HubSpot –ø–æ email –∞–≥–µ–Ω—Ç–∞
                                    print(f"üîç –ü–æ—à—É–∫ HubSpot owner –¥–ª—è –∞–≥–µ–Ω—Ç–∞: {agent.email}")
                                    owners = hubspot_client.crm.owners.owners_api.get_page()
                                    for owner in owners.results:
                                        if owner.email and owner.email.lower() == agent.email.lower():
                                            hubspot_owner_id = str(owner.id)
                                            print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ HubSpot owner ID: {hubspot_owner_id} –¥–ª—è {agent.email}")
                                            break
                                    if not hubspot_owner_id:
                                        print(f"‚ö†Ô∏è HubSpot owner –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è {agent.email}")
                                except Exception as owner_error:
                                    print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É HubSpot owner: {owner_error}")
                                    app.logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É HubSpot owner –¥–ª—è {agent.email}: {owner_error}")
                            
                            deal_properties = {
                                "dealname": form.deal_name.data,
                                "amount": get_budget_value(form.budget.data),
                                "dealtype": "newbusiness",
                                "pipeline": "2341107958",  # Pipeline ID –¥–ª—è "–õ–∏–¥—ã"
                                "dealstage": "3204738258",  # –°—Ç–∞–¥—ñ—è ID –¥–ª—è "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞" (–≤–∞–ª—ñ–¥–Ω–∏–π ID)
                                "phone_number": formatted_phone,  # –î–æ–¥–∞—î–º–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ —É–≥–æ–¥—É
                                "from_agent_portal__name_": current_user.username  # –Ü–º'—è –∞–≥–µ–Ω—Ç–∞, —è–∫–∏–π —Å—Ç–≤–æ—Ä–∏–≤ –ª—ñ–¥
                            }
                            
                            # –î–æ–¥–∞—î–º–æ hubspot_owner_id —è–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ
                            if hubspot_owner_id:
                                deal_properties["hubspot_owner_id"] = hubspot_owner_id
                                print(f"‚úÖ –î–æ–¥–∞–Ω–æ hubspot_owner_id: {hubspot_owner_id} –¥–æ —É–≥–æ–¥–∏")
                            else:
                                print(f"‚ö†Ô∏è hubspot_owner_id –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (owner –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ)")
                            
                            print(f"–í–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ —É–≥–æ–¥–∏: {deal_properties}")
                            deal_input = DealInput(properties=deal_properties)
                            print(f"–°—Ç–≤–æ—Ä—é—î–º–æ —É–≥–æ–¥—É –∑ –≤—Ö—ñ–¥–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏: {deal_input}")
                            hubspot_deal = hubspot_client.crm.deals.basic_api.create(deal_input)
                            hubspot_deal_id = str(hubspot_deal.id)
                            print(f"HubSpot —É–≥–æ–¥–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ: {hubspot_deal_id}")
                            
                            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–≤'—è–∑–æ–∫ –º—ñ–∂ –∫–æ–Ω—Ç–∞–∫—Ç–æ–º —Ç–∞ —É–≥–æ–¥–æ—é
                            print(f"=== –°–¢–í–û–†–ï–ù–ù–Ø –ó–í'–Ø–ó–ö–£ –ö–û–ù–¢–ê–ö–¢-–£–ì–û–î–ê ===")
                            try:
                                hubspot_client.crm.associations.basic_api.create(
                                    from_object_type="contacts",
                                    from_object_id=hubspot_contact_id,
                                    to_object_type="deals", 
                                    to_object_id=hubspot_deal_id,
                                    association_type="contact_to_deal"
                                )
                                print(f"–ó–≤'—è–∑–æ–∫ –º—ñ–∂ –∫–æ–Ω—Ç–∞–∫—Ç–æ–º {hubspot_contact_id} —Ç–∞ —É–≥–æ–¥–æ—é {hubspot_deal_id} —Å—Ç–≤–æ—Ä–µ–Ω–æ")
                            except Exception as assoc_error:
                                print(f"=== –ü–û–ú–ò–õ–ö–ê –°–¢–í–û–†–ï–ù–ù–Ø –ó–í'–Ø–ó–ö–£ ===")
                                print(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤'—è–∑–∫—É: {assoc_error}")
                                print(f"–¢–∏–ø –ø–æ–º–∏–ª–∫–∏: {type(assoc_error).__name__}")
                                app.logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤'—è–∑–∫—É HubSpot: {assoc_error}")
                                # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ - –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ
                        except Exception as deal_error:
                            print(f"=== –ü–û–ú–ò–õ–ö–ê –°–¢–í–û–†–ï–ù–ù–Ø –£–ì–û–î–ò ===")
                            print(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —É–≥–æ–¥–∏: {deal_error}")
                            app.logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è HubSpot —É–≥–æ–¥–∏: {deal_error}")
                            # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ - –∫–æ–Ω—Ç–∞–∫—Ç –≤–∂–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π, –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ
                    else:
                        print("‚ö†Ô∏è HubSpot –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —É–≥–æ–¥–∏")
                    
                    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —É—Å–ø—ñ—à–Ω—ñ—Å—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
                    if hubspot_contact_id:
                        hubspot_sync_success = True
                        print(f"‚úÖ HubSpot —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! Contact: {hubspot_contact_id}, Deal: {hubspot_deal_id if hubspot_deal_id else '–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ'}")
                    else:
                        hubspot_sync_success = False
                        print("‚ö†Ô∏è HubSpot —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–∞ (–∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π)")
                    
                except Exception as hubspot_error:
                    error_msg = str(hubspot_error)
                    print(f"=== –î–ï–¢–ê–õ–¨–ù–ê –ü–û–ú–ò–õ–ö–ê HUBSPOT ===")
                    print(f"–¢–∏–ø –ø–æ–º–∏–ª–∫–∏: {type(hubspot_error).__name__}")
                    print(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {error_msg}")
                    print(f"Email: {form.email.data}")
                    print(f"Deal name: {form.deal_name.data}")
                    print(f"Phone: {formatted_phone}")
                    print(f"Budget: {form.budget.data}")
                    traceback.print_exc()
                    
                    # –õ–æ–≥—É—î–º–æ –≤ —Ñ–∞–π–ª
                    app.logger.error(f"HubSpot –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ª—ñ–¥–∞: {error_msg}")
                    app.logger.error(f"–î–µ—Ç–∞–ª—ñ: email={form.email.data}, deal_name={form.deal_name.data}, phone={formatted_phone}")
                    
                    # –õ–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫—É, –∞–ª–µ –Ω–µ –±–ª–æ–∫—É—î–º–æ —É—Å–ø—ñ—à–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ª—ñ–¥–∞
                    # –õ—ñ–¥ –≤–∂–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –≤ –ª–æ–∫–∞–ª—å–Ω—ñ–π –ë–î, —Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –¥–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    if "Contact already exists" in error_msg or "409" in error_msg:
                        flash(f'–õ—ñ–¥ –¥–æ–¥–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ. –ö–æ–Ω—Ç–∞–∫—Ç –∑ email {form.email.data} –≤–∂–µ —ñ—Å–Ω—É—î –≤ HubSpot.', 'warning')
                    elif "401" in error_msg or "Unauthorized" in error_msg:
                        flash('–õ—ñ–¥ –¥–æ–¥–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ. –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó HubSpot API (–Ω–µ–¥—ñ–π—Å–Ω–∏–π –∫–ª—é—á).', 'warning')
                    elif "403" in error_msg or "Forbidden" in error_msg:
                        flash('–õ—ñ–¥ –¥–æ–¥–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ. –ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ HubSpot API.', 'warning')
                    elif "429" in error_msg or "rate limit" in error_msg.lower():
                        flash('–õ—ñ–¥ –¥–æ–¥–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ. –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ HubSpot API.', 'warning')
                    else:
                        flash(f'–õ—ñ–¥ –¥–æ–¥–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ. –ü–æ–º–∏–ª–∫–∞ HubSpot: {error_msg[:100]}...', 'warning')
                    # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è - –ª—ñ–¥ –≤–∂–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π, –ø—Ä–æ—Å—Ç–æ –±–µ–∑ HubSpot —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
            else:
                print("HubSpot –∫–ª—ñ—î–Ω—Ç –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π")
            
            # ‚ö° –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø: –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ–¥ –∑ HubSpot ID, —è–∫—â–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞
            if hubspot_contact_id or hubspot_deal_id:
                lead.hubspot_contact_id = hubspot_contact_id
                lead.hubspot_deal_id = hubspot_deal_id
                db.session.commit()
                print(f"–õ—ñ–¥ #{lead.id} –æ–Ω–æ–≤–ª–µ–Ω–æ –∑ HubSpot ID: contact={hubspot_contact_id}, deal={hubspot_deal_id}")
            
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            if hubspot_sync_success and hubspot_contact_id:
                app.logger.info(f"üéâ –£–°–ü–Ü–•! –õ—ñ–¥ #{lead.id} –¥–æ–¥–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ —Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –∑ HubSpot!")
                app.logger.info(f"   HubSpot Contact ID: {hubspot_contact_id}")
                app.logger.info(f"   HubSpot Deal ID: {hubspot_deal_id}")
                flash('–õ—ñ–¥ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ —Ç–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –∑ HubSpot!', 'success')
            else:
                app.logger.info(f"üéâ –£–°–ü–Ü–•! –õ—ñ–¥ #{lead.id} –¥–æ–¥–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ!")
                app.logger.warning(f"‚ö†Ô∏è HubSpot —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–∞ –∞–±–æ —á–∞—Å—Ç–∫–æ–≤–∞")
                flash('–õ—ñ–¥ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ!', 'success')
            
            app.logger.info("üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ dashboard...")
            app.logger.info("=" * 80)
            return redirect(url_for('dashboard'))
            
        except Exception as e:
            app.logger.error("=" * 80)
            app.logger.error(f"‚ùå‚ùå‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ª—ñ–¥–∞!")
            app.logger.error(f"–¢–∏–ø –ø–æ–º–∏–ª–∫–∏: {type(e).__name__}")
            app.logger.error(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {str(e)}")
            app.logger.error(f"Stack trace:\n{traceback.format_exc()}")
            app.logger.error("=" * 80)
            
            flash(f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ª—ñ–¥–∞: {str(e)}', 'error')
            return redirect(url_for('add_lead'))
    
    # GET –∑–∞–ø–∏—Ç –∞–±–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∞ —Ñ–æ—Ä–º–∞
    if request.method == 'POST':
        app.logger.warning("‚ö†Ô∏è POST –∑–∞–ø–∏—Ç, –∞–ª–µ —Ñ–æ—Ä–º–∞ –Ω–µ –ø—Ä–æ–π—à–ª–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—é")
    else:
        app.logger.info("üìÑ GET –∑–∞–ø–∏—Ç - –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ñ–æ—Ä–º—É")
    
    app.logger.info("=" * 80)
    return render_template('add_lead.html', form=form)

@app.route('/update_status/<int:lead_id>', methods=['POST'])
@login_required
def update_status(lead_id):
    lead = Lead.query.get_or_404(lead_id)
    if lead.agent_id != current_user.id and current_user.role != 'admin':
        flash('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ü—å–æ–≥–æ –ª—ñ–¥–∞')
        return redirect(url_for('dashboard'))
    
    new_status = request.json.get('status')
    if new_status:
        lead.status = new_status
        db.session.commit()
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ HubSpot (—è–∫—â–æ —î ID)
        if lead.hubspot_contact_id:
            try:
                from hubspot.crm.contacts import SimplePublicObjectInput
                
                contact_properties = {"hs_lead_status": new_status.upper()}
                contact_input = SimplePublicObjectInput(properties=contact_properties)
                
                hubspot_client.crm.contacts.basic_api.update(
                    contact_id=lead.hubspot_contact_id,
                    simple_public_object_input=contact_input
                )
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è HubSpot: {e}")
        
        return jsonify({'success': True})
    
    return jsonify({'success': False})

@app.route('/transfer_lead/<int:lead_id>', methods=['POST'])
@login_required
def transfer_lead(lead_id):
    lead = Lead.query.get_or_404(lead_id)
    if lead.agent_id != current_user.id and current_user.role != 'admin':
        return jsonify({'success': False, 'message': '–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ü—å–æ–≥–æ –ª—ñ–¥–∞'})
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥–∞—á—ñ
    lead.is_transferred = not lead.is_transferred
    db.session.commit()
    
    return jsonify({
        'success': True, 
        'is_transferred': lead.is_transferred,
        'message': '–õ—ñ–¥ –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –ø–µ—Ä–µ–¥–∞–Ω–∏–π' if lead.is_transferred else '–õ—ñ–¥ –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∏–π'
    })


@app.route('/lead/<int:lead_id>')
@login_required
def view_lead(lead_id):
    lead = Lead.query.get_or_404(lead_id)
    if lead.agent_id != current_user.id and current_user.role != 'admin':
        flash('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ü—å–æ–≥–æ –ª—ñ–¥–∞')
        return redirect(url_for('dashboard'))
    
    # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —Ç–µ–ø–µ—Ä –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —É —Ñ–æ–Ω—ñ –∫–æ–∂–Ω—ñ 60 —Å–µ–∫—É–Ω–¥
    # –î–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —î –∫–Ω–æ–ø–∫–∞ "–û–Ω–æ–≤–∏—Ç–∏" –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
    
    agent = User.query.get(lead.agent_id)
    notes = []  # –ù–æ—Ç–∞—Ç–∫–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ –∑ —Å–∏—Å—Ç–µ–º–∏
    
    try:
        activities = Activity.query.filter_by(lead_id=lead.id).order_by(Activity.created_at.desc()).all()
    except Exception:
        # –Ø–∫—â–æ —Ç–∞–±–ª–∏—Ü—è activity –Ω–µ —ñ—Å–Ω—É—î, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫
        activities = []
    
    from datetime import date
    return render_template('lead_detail.html', lead=lead, agent=agent, notes=notes, activities=activities, today=date.today())

@app.route('/lead/<int:lead_id>/edit', methods=['GET', 'POST'])
@login_required
def edit_lead(lead_id):
    lead = Lead.query.get_or_404(lead_id)
    if lead.agent_id != current_user.id and current_user.role != 'admin':
        flash('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ü—å–æ–≥–æ –ª—ñ–¥–∞')
        return redirect(url_for('dashboard'))
    
    form = LeadEditForm(request.form)
    
    if request.method == 'GET':
        # –ó–∞–ø–æ–≤–Ω—é—î–º–æ —Ñ–æ—Ä–º—É –ø–æ—Ç–æ—á–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        form.deal_name.data = lead.deal_name
        form.email.data = lead.email
        form.phone.data = lead.phone
        form.budget.data = lead.budget
        form.status.data = lead.status
        form.country.data = lead.country
        form.purchase_goal.data = lead.purchase_goal
        form.property_type.data = lead.property_type
        form.object_type.data = lead.object_type
        form.communication_language.data = lead.communication_language
        form.source.data = lead.source
        form.refusal_reason.data = lead.refusal_reason
        form.company.data = lead.company
        form.second_phone.data = lead.second_phone
        form.telegram_nickname.data = lead.telegram_nickname
        form.messenger.data = lead.messenger
        form.birth_date.data = lead.birth_date.strftime('%Y-%m-%d') if lead.birth_date else ''
    
    if request.method == 'POST' and form.validate():
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ä–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        old_status = lead.status
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –ª—ñ–¥–∞
        lead.deal_name = form.deal_name.data
        lead.email = form.email.data
        lead.phone = form.phone.data
        lead.budget = form.budget.data
        lead.status = form.status.data
        lead.country = form.country.data
        lead.purchase_goal = form.purchase_goal.data
        lead.property_type = form.property_type.data
        lead.object_type = form.object_type.data
        lead.communication_language = form.communication_language.data
        lead.source = form.source.data
        lead.refusal_reason = form.refusal_reason.data
        lead.company = form.company.data
        lead.second_phone = form.second_phone.data
        lead.telegram_nickname = form.telegram_nickname.data
        lead.messenger = form.messenger.data
        
        # –û–±—Ä–æ–±–∫–∞ –¥–∞—Ç–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
        if form.birth_date.data:
            try:
                from datetime import datetime
                lead.birth_date = datetime.strptime(form.birth_date.data, '%Y-%m-%d').date()
            except ValueError:
                flash('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è')
                return render_template('edit_lead.html', form=form, lead=lead)
        else:
            lead.birth_date = None
        
        db.session.commit()
        
        # –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–∏–≤—Å—è, –æ–Ω–æ–≤–ª—é—î–º–æ –π–æ–≥–æ –≤ HubSpot
        if old_status != lead.status:
            print(f"üîÑ –°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–∏–≤—Å—è –∑ '{old_status}' –Ω–∞ '{lead.status}', –æ–Ω–æ–≤–ª—é—î–º–æ HubSpot...")
            app.logger.info(f"üîÑ –°—Ç–∞—Ç—É—Å –ª—ñ–¥–∞ {lead.id} –∑–º—ñ–Ω–∏–≤—Å—è –∑ '{old_status}' –Ω–∞ '{lead.status}', –æ–Ω–æ–≤–ª—é—î–º–æ HubSpot...")
            
            if update_hubspot_dealstage(lead, lead.status):
                flash(f'–õ—ñ–¥ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ! –°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –∑ HubSpot.', 'success')
            else:
                flash(f'–õ—ñ–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ, –∞–ª–µ —Å—Ç–∞—Ç—É—Å –Ω–µ –±—É–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –∑ HubSpot.', 'warning')
        else:
            flash('–õ—ñ–¥ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!', 'success')
        
        return redirect(url_for('view_lead', lead_id=lead.id))
    
    return render_template('edit_lead.html', form=form, lead=lead)

@app.route('/sync_lead/<int:lead_id>', methods=['POST'])
@login_required
def sync_lead(lead_id):
    """–†—É—á–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª—ñ–¥–∞ –∑ HubSpot"""
    lead = Lead.query.get_or_404(lead_id)
    if lead.agent_id != current_user.id and current_user.role != 'admin':
        return jsonify({'success': False, 'message': '–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó —Ü—å–æ–≥–æ –ª—ñ–¥–∞'})
    
    if not hubspot_client:
        return jsonify({'success': False, 'message': 'HubSpot API –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π'})
    
    try:
        success = sync_lead_from_hubspot(lead)
        if success:
            return jsonify({'success': True, 'message': '–õ—ñ–¥ —É—Å–ø—ñ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –∑ HubSpot'})
        else:
            return jsonify({'success': False, 'message': '–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ HubSpot'})
    except Exception as e:
        return jsonify({'success': False, 'message': f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'})

@app.route('/sync_all_leads', methods=['POST'])
@login_required
def sync_all_leads():
    """–†—É—á–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö –ª—ñ–¥—ñ–≤ –∑ HubSpot"""
    if current_user.role != 'admin':
        return jsonify({'success': False, 'message': '–¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –≤—Å—ñ –ª—ñ–¥—ñ'})
    
    if not hubspot_client:
        return jsonify({'success': False, 'message': 'HubSpot API –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π'})
    
    try:
        success = sync_all_leads_from_hubspot()
        if success:
            return jsonify({'success': True, 'message': '–í—Å—ñ –ª—ñ–¥–∏ —É—Å–ø—ñ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –∑ HubSpot'})
        else:
            return jsonify({'success': False, 'message': '–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ HubSpot'})
    except Exception as e:
        return jsonify({'success': False, 'message': f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'})

@app.route('/sync_lead/<int:lead_id>', methods=['POST'])
@login_required
def sync_single_lead(lead_id):
    """–†—É—á–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –æ–∫—Ä–µ–º–æ–≥–æ –ª—ñ–¥–∞ –∑ HubSpot"""
    lead = Lead.query.get_or_404(lead_id)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
    if lead.agent_id != current_user.id and current_user.role != 'admin':
        return jsonify({'success': False, 'message': '–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó —Ü—å–æ–≥–æ –ª—ñ–¥–∞'})
    
    if not hubspot_client:
        return jsonify({'success': False, 'message': 'HubSpot API –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π'})
    
    try:
        success = sync_lead_from_hubspot(lead)
        if success:
            from datetime import datetime
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
            if lead.last_sync_at:
                last_sync = lead.last_sync_at.strftime('%d.%m.%Y %H:%M')
            else:
                last_sync = '–ù–µ–≤—ñ–¥–æ–º–æ'
            
            return jsonify({
                'success': True, 
                'message': '–õ—ñ–¥ —É—Å–ø—ñ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –∑ HubSpot',
                'last_sync_at': last_sync
            })
        else:
            return jsonify({'success': False, 'message': '–ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ HubSpot'})
    except Exception as e:
        return jsonify({'success': False, 'message': f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'})

@app.route('/admin/users')
@login_required
def admin_users():
    """–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"""
    if current_user.role != 'admin':
        flash('–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ')
        return redirect(url_for('dashboard'))
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Å–æ—Ä—Ç—É—î–º–æ –∑–∞ –¥–∞—Ç–æ—é —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è, –Ω–∞–π–Ω–æ–≤—ñ—à—ñ –∑–≤–µ—Ä—Ö—É)
    users = User.query.order_by(User.created_at.desc()).all()
    
    # –î–æ–¥–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    users_with_docs = []
    for user in users:
        doc_count = UserDocument.query.filter_by(user_id=user.id).count()
        user.doc_count = doc_count
        users_with_docs.append(user)
    
    return render_template('admin_users.html', users=users_with_docs)

@app.route('/admin/users/<int:user_id>/toggle_status', methods=['POST'])
@login_required
def toggle_user_status(user_id):
    """–ê–∫—Ç–∏–≤—É–≤–∞–Ω–Ω—è/–¥–µ–∞–∫—Ç–∏–≤—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if current_user.role != 'admin':
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'})
    
    try:
        user = User.query.get(user_id)
        if not user:
            return jsonify({'success': False, 'message': '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'})
        
        if user.id == current_user.id:
            return jsonify({'success': False, 'message': '–ù–µ –º–æ–∂–Ω–∞ –¥–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –≤–ª–∞—Å–Ω–∏–π –∞–∫–∞—É–Ω—Ç'})
        
        user.is_active = not user.is_active
        db.session.commit()
        
        status = '–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ' if user.is_active else '–¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ'
        return jsonify({'success': True, 'message': f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.username} {status}'})
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'})

@app.route('/admin/users/<int:user_id>/delete', methods=['POST'])
@login_required
def delete_user(user_id):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if current_user.role != 'admin':
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'})
    
    try:
        user = User.query.get(user_id)
        if not user:
            return jsonify({'success': False, 'message': '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'})
        
        if user.id == current_user.id:
            return jsonify({'success': False, 'message': '–ù–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–ª–∞—Å–Ω–∏–π –∞–∫–∞—É–Ω—Ç'})
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ª—ñ–¥–∏
        user_leads = Lead.query.filter_by(agent_id=user_id).count()
        if user_leads > 0:
            return jsonify({'success': False, 'message': f'–ù–µ –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ {user_leads} –ª—ñ–¥–∞–º–∏. –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–¥–∞–π—Ç–µ –ª—ñ–¥–∏ —ñ–Ω—à–æ–º—É –∞–≥–µ–Ω—Ç—É.'})
        
        db.session.delete(user)
        db.session.commit()
        
        return jsonify({'success': True, 'message': f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.username} –≤–∏–¥–∞–ª–µ–Ω–æ'})
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'})

@app.route('/admin/users/<int:user_id>/unlock', methods=['POST'])
@login_required
def unlock_user(user_id):
    """–†–æ–∑–±–ª–æ–∫–æ–≤—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if current_user.role != 'admin':
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'})
    
    try:
        user = User.query.get(user_id)
        if not user:
            return jsonify({'success': False, 'message': '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'})
        
        user.unlock_account()
        db.session.commit()
        
        return jsonify({'success': True, 'message': f'–ê–∫–∞—É–Ω—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user.username} —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ'})
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'})

@app.route('/admin/users/<int:user_id>/commission', methods=['POST'])
@login_required
def update_user_commission(user_id):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–º—ñ—Å—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if current_user.role != 'admin':
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'})
    
    try:
        data = request.get_json()
        commission = data.get('commission')
        
        if commission is None:
            return jsonify({'success': False, 'message': '–ù–µ –≤–∫–∞–∑–∞–Ω–æ –∫–æ–º—ñ—Å—ñ—é'})
        
        try:
            commission = float(commission)
            if commission < 0 or commission > 100:
                return jsonify({'success': False, 'message': '–ö–æ–º—ñ—Å—ñ—è –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 0% –¥–æ 100%'})
        except ValueError:
            return jsonify({'success': False, 'message': '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º—ñ—Å—ñ—ó'})
        
        user = User.query.get(user_id)
        if not user:
            return jsonify({'success': False, 'message': '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'})
        
        user.commission = commission
        db.session.commit()
        
        return jsonify({
            'success': True, 
            'message': f'–ö–æ–º—ñ—Å—ñ—é –¥–ª—è {user.username} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {commission}%',
            'commission': commission
        })
        
    except Exception as e:
        db.session.rollback()
        app.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–æ–º—ñ—Å—ñ—ó: {e}")
        return jsonify({'success': False, 'message': f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'})

# ===== –î–û–ö–£–ú–ï–ù–¢–ò –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í =====
@app.route('/admin/users/<int:user_id>/documents', methods=['GET'])
@login_required
def get_user_documents(user_id):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    if current_user.role != 'admin' and current_user.id != user_id:
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'})
    
    try:
        user = User.query.get(user_id)
        if not user:
            return jsonify({'success': False, 'message': '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'})
        
        documents = UserDocument.query.filter_by(user_id=user_id).order_by(UserDocument.uploaded_at.desc()).all()
        
        docs_list = []
        for doc in documents:
            docs_list.append({
                'id': doc.id,
                'filename': doc.filename,
                'file_size': doc.file_size,
                'file_type': doc.file_type,
                'uploaded_at': doc.uploaded_at.strftime('%d.%m.%Y %H:%M') if doc.uploaded_at else '',
                'description': doc.description,
                'uploader_name': doc.uploader.username if doc.uploader else '–ù–µ–≤—ñ–¥–æ–º–æ'
            })
        
        return jsonify({'success': True, 'documents': docs_list, 'username': user.username})
        
    except Exception as e:
        app.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤: {e}")
        return jsonify({'success': False, 'message': f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'})

@app.route('/admin/users/<int:user_id>/documents', methods=['POST'])
@login_required
def upload_user_document(user_id):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ S3"""
    app.logger.info(f"üì• === –ü–û–ß–ê–¢–û–ö –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –î–û–ö–£–ú–ï–ù–¢–£ ===")
    app.logger.info(f"   User ID: {user_id}")
    app.logger.info(f"   Current User: {current_user.username} (role: {current_user.role})")
    
    if current_user.role != 'admin':
        app.logger.warning(f"‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –¥–ª—è {current_user.username}")
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'})
    
    try:
        user = User.query.get(user_id)
        if not user:
            app.logger.error(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ ID {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return jsonify({'success': False, 'message': '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'})
        
        app.logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–æ: {user.username}")
        
        if 'file' not in request.files:
            app.logger.error("‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ request.files")
            app.logger.error(f"   –î–æ—Å—Ç—É–ø–Ω—ñ –∫–ª—é—á—ñ: {list(request.files.keys())}")
            return jsonify({'success': False, 'message': '–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'})
        
        file = request.files['file']
        app.logger.info(f"‚úÖ –§–∞–π–ª –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ request")
        
        if file.filename == '':
            app.logger.error("‚ùå –Ü–º'—è —Ñ–∞–π–ª—É –ø–æ—Ä–æ–∂–Ω—î")
            return jsonify({'success': False, 'message': '–§–∞–π–ª –Ω–µ –≤–∏–±—Ä–∞–Ω–æ'})
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É
        import uuid
        from werkzeug.utils import secure_filename
        
        original_filename = secure_filename(file.filename)
        file_extension = os.path.splitext(original_filename)[1]
        unique_filename = f"user_documents/{user_id}/{uuid.uuid4().hex}{file_extension}"
        
        app.logger.info(f"üìÑ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ñ–∞–π–ª:")
        app.logger.info(f"   –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ –Ω–∞–∑–≤–∞: {original_filename}")
        app.logger.info(f"   –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è: {file_extension}")
        app.logger.info(f"   –£–Ω—ñ–∫–∞–ª—å–Ω–∞ –Ω–∞–∑–≤–∞: {unique_filename}")
        app.logger.info(f"   Content-Type: {file.content_type}")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É
        file.seek(0, 2)  # –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ—Å—å –≤ –∫—ñ–Ω–µ—Ü—å —Ñ–∞–π–ª—É
        file_size = file.tell()
        file.seek(0)  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –Ω–∞ –ø–æ—á–∞—Ç–æ–∫
        
        app.logger.info(f"   –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: {file_size} bytes ({file_size/1024/1024:.2f} MB)")
        
        if file_size > 10 * 1024 * 1024:
            app.logger.error(f"‚ùå –§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π: {file_size/1024/1024:.2f} MB")
            return jsonify({'success': False, 'message': '–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π (–º–∞–∫—Å. 10MB)'})
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª –≤ S3
        app.logger.info("üöÄ –ü–æ—á–∞—Ç–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ S3...")
        s3_url = upload_file_to_s3(file, unique_filename)
        app.logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –≤ S3: {s3_url}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –≤ –ë–î
        app.logger.info("üíæ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É –≤ –ë–î...")
        document = UserDocument(
            user_id=user_id,
            filename=original_filename,
            file_path=unique_filename,  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —à–ª—è—Ö –≤ S3
            file_size=file_size,
            file_type=file.content_type,
            uploaded_by=current_user.id,
            description=request.form.get('description', '')
        )
        
        db.session.add(document)
        db.session.commit()
        
        app.logger.info(f"‚úÖ –ó–∞–ø–∏—Å —Å—Ç–≤–æ—Ä–µ–Ω–æ –≤ –ë–î (ID: {document.id})")
        app.logger.info(f"üéâ === –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–Ü–®–ù–û ===")
        
        return jsonify({
            'success': True,
            'message': f'–î–æ–∫—É–º–µ–Ω—Ç "{original_filename}" —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –≤ S3',
            'document': {
                'id': document.id,
                'filename': document.filename,
                'file_size': document.file_size,
                'uploaded_at': document.uploaded_at.strftime('%d.%m.%Y %H:%M')
            }
        })
        
    except Exception as e:
        db.session.rollback()
        app.logger.error(f"‚ùå‚ùå‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê ‚ùå‚ùå‚ùå")
        app.logger.error(f"   –¢–∏–ø –ø–æ–º–∏–ª–∫–∏: {type(e).__name__}")
        app.logger.error(f"   –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {str(e)}")
        app.logger.error(f"   Traceback:\n{traceback.format_exc()}")
        return jsonify({'success': False, 'message': f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'})

@app.route('/admin/users/<int:user_id>/documents/<int:doc_id>', methods=['DELETE'])
@login_required
def delete_user_document(user_id, doc_id):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ S3"""
    if current_user.role != 'admin':
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'})
    
    try:
        document = UserDocument.query.filter_by(id=doc_id, user_id=user_id).first()
        if not document:
            return jsonify({'success': False, 'message': '–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'})
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª –∑ S3
        delete_file_from_s3(document.file_path)
        
        filename = document.filename
        db.session.delete(document)
        db.session.commit()
        
        return jsonify({'success': True, 'message': f'–î–æ–∫—É–º–µ–Ω—Ç "{filename}" –≤–∏–¥–∞–ª–µ–Ω–æ –∑ S3'})
        
    except Exception as e:
        db.session.rollback()
        app.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç—É: {e}")
        return jsonify({'success': False, 'message': f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'})

# ===== –í–ê–õ–Ü–î–ê–¶–Ü–Ø –¢–ï–õ–ï–§–û–ù–ù–ò–• –ù–û–ú–ï–†–Ü–í =====
@app.route('/api/check-phone', methods=['POST'])
@login_required
def check_phone_number():
    """Real-time –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–∞ –¥—É–±–ª—ñ–∫–∞—Ç–∏"""
    try:
        data = request.get_json()
        phone_input = data.get('phone', '').strip()
        
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        app.logger.info(f"üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞: '{phone_input}'")
        
        # –ú—ñ–Ω—ñ–º—É–º 4 —Ü–∏—Ñ—Ä–∏ –¥–ª—è –ø–æ—à—É–∫—É (–æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è)
        if not phone_input or len(phone_input) < 4:
            return jsonify({
                'count': 0,
                'matches': [],
                'message': '–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º—É–º 4 —Å–∏–º–≤–æ–ª–∏'
            })
        
        # –û—á–∏—â–∞—î–º–æ –Ω–æ–º–µ—Ä –≤—ñ–¥ —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è –ø–æ—à—É–∫—É
        clean_phone = ''.join(filter(str.isdigit, phone_input))
        
        if len(clean_phone) < 4:
            return jsonify({
                'count': 0,
                'matches': [],
                'message': '–í–≤–µ–¥—ñ—Ç—å –º—ñ–Ω—ñ–º—É–º 4 —Ü–∏—Ñ—Ä–∏'
            })
        
        app.logger.info(f"   –û—á–∏—â–µ–Ω–∏–π –Ω–æ–º–µ—Ä: '{clean_phone}'")
        
        # –®—É–∫–∞—î–º–æ –ª—ñ–¥–∏ –∑ —Å—Ö–æ–∂–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
        # –†—ñ–∑–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è PostgreSQL —Ç–∞ SQLite
        database_uri = app.config['SQLALCHEMY_DATABASE_URI']
        
        if database_uri.startswith('postgresql'):
            # PostgreSQL –ø—ñ–¥—Ç—Ä–∏–º—É—î regexp_replace
            matching_leads = Lead.query.filter(
                func.regexp_replace(Lead.phone, '[^0-9]', '', 'g').like(f'%{clean_phone}%')
            ).limit(10).all()
        else:
            # –î–ª—è SQLite –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–æ—Å—Ç–∏–π LIKE (–Ω–æ–º–µ—Ä–∏ –≤–∂–µ –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω—ñ)
            # –®—É–∫–∞—î–º–æ –ø–æ —á–∞—Å—Ç–∫–æ–≤–æ–º—É —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—é
            matching_leads = Lead.query.filter(
                Lead.phone.like(f'%{clean_phone}%')
            ).limit(10).all()
            
            # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –≤ Python –¥–ª—è SQLite
            filtered_leads = []
            for lead in matching_leads:
                lead_clean = ''.join(filter(str.isdigit, lead.phone or ''))
                if clean_phone in lead_clean:
                    filtered_leads.append(lead)
            matching_leads = filtered_leads[:10]
        
        app.logger.info(f"   –ó–Ω–∞–π–¥–µ–Ω–æ –∑–±—ñ–≥—ñ–≤: {len(matching_leads)}")
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        if matching_leads:
            for lead in matching_leads[:3]:  # –ü–µ—Ä—à—ñ 3 –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                app.logger.info(f"      –ó–Ω–∞–π–¥–µ–Ω–æ: {lead.deal_name} - {lead.phone}")
        
        # –§–æ—Ä–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        matches = []
        for lead in matching_leads:
            matches.append({
                'id': lead.id,
                'name': lead.deal_name,
                'phone': lead.phone,
                'email': lead.email,
                'status': lead.status,
                'agent': lead.agent.username if lead.agent else '–ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ',
                'created_at': lead.created_at.strftime('%d.%m.%Y') if lead.created_at else ''
            })
        
        return jsonify({
            'success': True,
            'count': len(matching_leads),
            'matches': matches,
            'search_term': phone_input
        })
        
    except Exception as e:
        app.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –Ω–æ–º–µ—Ä–∞: {e}")
        app.logger.error(traceback.format_exc())
        return jsonify({
            'success': False,
            'count': 0,
            'matches': [],
            'message': f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'
        })

@app.route('/admin/test-s3')
@login_required
def test_s3_connection():
    """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ S3"""
    if current_user.role != 'admin':
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'})
    
    app.logger.info("üß™ === –¢–ï–°–¢ S3 –ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø ===")
    
    try:
        s3_client = get_s3_client()
        if not s3_client:
            return jsonify({
                'success': False,
                'message': 'S3 –∫–ª—ñ—î–Ω—Ç –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ - –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞',
                'config': {
                    'AWS_ACCESS_KEY_ID': '‚úÖ' if app.config.get('AWS_ACCESS_KEY_ID') else '‚ùå',
                    'AWS_SECRET_ACCESS_KEY': '‚úÖ' if app.config.get('AWS_SECRET_ACCESS_KEY') else '‚ùå',
                    'AWS_S3_BUCKET': app.config.get('AWS_S3_BUCKET', '‚ùå –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'),
                    'AWS_REGION': app.config.get('AWS_REGION', '–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º')
                }
            })
        
        # –¢–µ—Å—Ç—É—î–º–æ —Å–ø–∏—Å–æ–∫ –æ–±'—î–∫—Ç—ñ–≤
        bucket = app.config['AWS_S3_BUCKET']
        app.logger.info(f"   –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ bucket: {bucket}")
        
        response = s3_client.list_objects_v2(Bucket=bucket, MaxKeys=1)
        app.logger.info(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ S3!")
        
        return jsonify({
            'success': True,
            'message': 'S3 –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!',
            'config': {
                'AWS_S3_BUCKET': bucket,
                'AWS_REGION': app.config['AWS_REGION'],
                'objects_count': response.get('KeyCount', 0)
            }
        })
        
    except ClientError as e:
        error_code = e.response.get('Error', {}).get('Code', 'Unknown')
        error_message = e.response.get('Error', {}).get('Message', 'Unknown')
        app.logger.error(f"‚ùå S3 ClientError: {error_code} - {error_message}")
        
        return jsonify({
            'success': False,
            'message': f'–ü–æ–º–∏–ª–∫–∞ S3: {error_code}',
            'details': error_message
        })
    except Exception as e:
        app.logger.error(f"‚ùå –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {type(e).__name__}: {str(e)}")
        return jsonify({
            'success': False,
            'message': f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'
        })

@app.route('/documents/<int:doc_id>/download')
@login_required
def download_document(doc_id):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—É –∑ S3"""
    try:
        document = UserDocument.query.get(doc_id)
        if not document:
            flash('–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 'error')
            return redirect(url_for('profile'))
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É: –∞–¥–º—ñ–Ω –∞–±–æ –≤–ª–∞—Å–Ω–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
        if current_user.role != 'admin' and current_user.id != document.user_id:
            flash('–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ', 'error')
            return redirect(url_for('profile'))
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª –∑ S3
        file_obj = download_file_from_s3(document.file_path)
        
        from flask import send_file
        return send_file(
            file_obj,
            as_attachment=True,
            download_name=document.filename,
            mimetype=document.file_type or 'application/octet-stream'
        )
        
    except Exception as e:
        app.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç—É: {e}")
        flash('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç—É –∑ S3', 'error')
        return redirect(url_for('profile'))

# ===== ERROR HANDLERS =====
@app.errorhandler(Exception)
def handle_exception(error):
    """–ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
    db.session.rollback()
    app.logger.error(f"Unhandled exception: {error}", exc_info=True)
    
    if request.path.startswith('/api/'):
        return jsonify({'success': False, 'error': 'Internal server error'}), 500
    
    return render_template('error.html', error="–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."), 500

@app.errorhandler(404)
def not_found(error):
    """–û–±—Ä–æ–±–Ω–∏–∫ 404 –ø–æ–º–∏–ª–∫–∏"""
    app.logger.warning(f"404 error: {request.url}")
    
    if request.path.startswith('/api/'):
        return jsonify({'success': False, 'error': 'Not found'}), 404
    
    return render_template('error.html', error="–°—Ç–æ—Ä—ñ–Ω–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"), 404

@app.errorhandler(500)
def internal_error(error):
    """–û–±—Ä–æ–±–Ω–∏–∫ 500 –ø–æ–º–∏–ª–∫–∏"""
    db.session.rollback()
    app.logger.error(f"500 error: {error}")
    
    if request.path.startswith('/api/'):
        return jsonify({'success': False, 'error': 'Internal server error'}), 500
    
    return render_template('error.html', error="–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"), 500

@app.route('/admin/hubspot-stages', methods=['GET'])
@login_required
def get_hubspot_stages():
    """–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Å—Ç–∞–¥—ñ—ó (stages) –∑ HubSpot pipeline –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–∞–ø–ø—ñ–Ω–≥—É"""
    if current_user.role != 'admin':
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞'})
    
    if not hubspot_client:
        return jsonify({'success': False, 'message': 'HubSpot API –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π'})
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ pipeline "–õ–∏–¥—ã" (ID: 2341107958)
        pipeline = hubspot_client.crm.pipelines.pipelines_api.get_by_id(
            object_type='deals',
            pipeline_id='2341107958'
        )
        
        stages_info = []
        for stage in pipeline.stages:
            stages_info.append({
                'id': stage.id,
                'label': stage.label,
                'display_order': stage.display_order
            })
        
        # –¢–∞–∫–æ–∂ –æ—Ç—Ä–∏–º—É—î–º–æ, —è–∫—ñ dealstage —î –≤ –ø–æ—Ç–æ—á–Ω–∏—Ö –ª—ñ–¥–∞—Ö
        leads_with_hubspot = Lead.query.filter(Lead.hubspot_deal_id.isnot(None)).limit(20).all()
        current_stages = {}
        
        for lead in leads_with_hubspot:
            if lead.hubspot_deal_id:
                try:
                    deal = hubspot_client.crm.deals.basic_api.get_by_id(
                        deal_id=lead.hubspot_deal_id,
                        properties=["dealstage"]
                    )
                    stage_id = deal.properties.get('dealstage')
                    if stage_id:
                        if stage_id not in current_stages:
                            current_stages[stage_id] = {
                                'count': 0,
                                'leads_sample': []
                            }
                        current_stages[stage_id]['count'] += 1
                        if len(current_stages[stage_id]['leads_sample']) < 3:
                            current_stages[stage_id]['leads_sample'].append({
                                'id': lead.id,
                                'name': lead.deal_name,
                                'current_status': lead.status
                            })
                except Exception as e:
                    print(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è deal {lead.hubspot_deal_id}: {e}")
        
        return jsonify({
            'success': True,
            'pipeline_stages': stages_info,
            'current_stages_usage': current_stages,
            'current_mapping': {
                '3204738258': 'new (–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞)',
                '3204738259': 'contacted (–ö–æ–Ω—Ç–∞–∫—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)',
                '3204738261': 'qualified (–ù–∞–∑–Ω–∞—á–µ–Ω–∞ –≤—Å—Ç—Ä–µ—á–∞)',
                '3204738262': 'qualified (–í—Å—Ç—Ä–µ—á–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞)',
                '3204738265': 'qualified (–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã)',
                '3204738266': 'qualified (–ó–∞–¥–∞—Ç–æ–∫)',
                '3204738267': 'closed (–°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞)'
            }
        })
        
    except Exception as e:
        app.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è stages –∑ HubSpot: {e}")
        app.logger.error(traceback.format_exc())
        return jsonify({'success': False, 'message': f'–ü–æ–º–∏–ª–∫–∞: {str(e)}'})


# ==================== PROPERTY ROUTES ====================

@app.route('/properties')
@login_required
def properties():
    """–°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ"""
    properties = Property.query.order_by(Property.created_at.desc()).all()
    return render_template('properties.html', properties=properties)


@app.route('/properties/<int:property_id>')
@login_required
def property_detail(property_id):
    """–î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å"""
    property_obj = Property.query.get_or_404(property_id)
    return render_template('property_detail.html', property=property_obj)


@app.route('/properties/create', methods=['GET', 'POST'])
@login_required
def create_property():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)"""
    if current_user.role != 'admin':
        flash('–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å.', 'error')
        return redirect(url_for('properties'))
    
    form = PropertyForm()
    if form.validate_on_submit():
        try:
            property_obj = Property(
                name=form.name.data,
                location_country=form.location_country.data,
                location_city=form.location_city.data,
                location_district=form.location_district.data,
                price_from=form.price_from.data,
                price_to=form.price_to.data if form.price_to.data else None,
                description=form.description.data,
                payment_type=form.payment_type.data,
                created_by=current_user.id
            )
            
            db.session.add(property_obj)
            db.session.flush()  # –û—Ç—Ä–∏–º—É—î–º–æ ID –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ
            
            # –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π
            photos = request.files.getlist('photos')
            app.logger.info(f"üì∏ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ: {len(photos)} —Ñ–∞–π–ª—ñ–≤")
            for photo in photos:
                if photo and photo.filename:
                    # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É
                    ext = photo.filename.rsplit('.', 1)[1].lower() if '.' in photo.filename else 'jpg'
                    timestamp = int(time.time())
                    filename = f"{property_obj.id}_{timestamp}_{photo.filename}"
                    
                    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª
                    file_url = upload_file_to_s3(photo, filename)
                    if file_url:
                        property_photo = PropertyPhoto(
                            property_id=property_obj.id,
                            filename=filename,
                            file_path=file_url
                        )
                        db.session.add(property_photo)
                        app.logger.info(f"‚úÖ –§–æ—Ç–æ –¥–æ–¥–∞–Ω–æ: {filename}")
            
            # –û–±—Ä–æ–±–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
            documents = request.files.getlist('documents')
            app.logger.info(f"üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤: {len(documents)} —Ñ–∞–π–ª—ñ–≤")
            for document in documents:
                if document and document.filename:
                    # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É
                    ext = document.filename.rsplit('.', 1)[1].lower() if '.' in document.filename else 'pdf'
                    timestamp = int(time.time())
                    filename = f"{property_obj.id}_{timestamp}_{document.filename}"
                    
                    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª
                    file_url = upload_file_to_s3(document, filename)
                    if file_url:
                        property_doc = PropertyDocument(
                            property_id=property_obj.id,
                            filename=document.filename,
                            file_path=file_url
                        )
                        db.session.add(property_doc)
                        app.logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–¥–∞–Ω–æ: {filename}")
            
            db.session.commit()
            
            flash('–ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞!', 'success')
            return redirect(url_for('property_detail', property_id=property_obj.id))
            
        except Exception as e:
            db.session.rollback()
            app.logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ: {e}")
            import traceback
            app.logger.error(traceback.format_exc())
            flash('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ.', 'error')
    
    return render_template('create_property.html', form=form)


@app.route('/properties/<int:property_id>/edit', methods=['GET', 'POST'])
@login_required
def edit_property(property_id):
    """–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)"""
    if current_user.role != 'admin':
        flash('–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å.', 'error')
        return redirect(url_for('properties'))
    
    property_obj = Property.query.get_or_404(property_id)
    form = PropertyForm(obj=property_obj)
    
    if form.validate_on_submit():
        try:
            property_obj.name = form.name.data
            property_obj.location_country = form.location_country.data
            property_obj.description = form.description.data
            property_obj.location_city = form.location_city.data
            property_obj.location_district = form.location_district.data
            property_obj.price_from = form.price_from.data
            property_obj.price_to = form.price_to.data if form.price_to.data else None
            property_obj.payment_type = form.payment_type.data
            
            # –û–±—Ä–æ–±–∫–∞ –ù–û–í–ò–• —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π
            photos = request.files.getlist('photos')
            app.logger.info(f"üì∏ –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ñ–æ—Ç–æ: {len(photos)} —Ñ–∞–π–ª—ñ–≤")
            for photo in photos:
                if photo and photo.filename:
                    ext = photo.filename.rsplit('.', 1)[1].lower() if '.' in photo.filename else 'jpg'
                    timestamp = int(time.time())
                    filename = f"{property_obj.id}_{timestamp}_{photo.filename}"
                    
                    file_url = upload_file_to_s3(photo, filename)
                    if file_url:
                        property_photo = PropertyPhoto(
                            property_id=property_obj.id,
                            filename=filename,
                            file_path=file_url
                        )
                        db.session.add(property_photo)
                        app.logger.info(f"‚úÖ –ù–æ–≤–µ —Ñ–æ—Ç–æ –¥–æ–¥–∞–Ω–æ: {filename}")
            
            # –û–±—Ä–æ–±–∫–∞ –ù–û–í–ò–• –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
            documents = request.files.getlist('documents')
            app.logger.info(f"üìÑ –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤: {len(documents)} —Ñ–∞–π–ª—ñ–≤")
            for document in documents:
                if document and document.filename:
                    ext = document.filename.rsplit('.', 1)[1].lower() if '.' in document.filename else 'pdf'
                    timestamp = int(time.time())
                    filename = f"{property_obj.id}_{timestamp}_{document.filename}"
                    
                    file_url = upload_file_to_s3(document, filename)
                    if file_url:
                        property_doc = PropertyDocument(
                            property_id=property_obj.id,
                            filename=document.filename,
                            file_path=file_url
                        )
                        db.session.add(property_doc)
                        app.logger.info(f"‚úÖ –ù–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–æ–¥–∞–Ω–æ: {filename}")
            
            db.session.commit()
            
            flash('–ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞!', 'success')
            return redirect(url_for('property_detail', property_id=property_obj.id))
            
        except Exception as e:
            db.session.rollback()
            app.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ: {e}")
            import traceback
            app.logger.error(traceback.format_exc())
            flash('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ.', 'error')
    
    return render_template('edit_property.html', form=form, property=property_obj)


@app.route('/properties/<int:property_id>/delete', methods=['POST'])
@login_required
def delete_property(property_id):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)"""
    if current_user.role != 'admin':
        flash('–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –º–æ–∂—É—Ç—å –≤–∏–¥–∞–ª—è—Ç–∏ –Ω–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å.', 'error')
        return redirect(url_for('properties'))
    
    property_obj = Property.query.get_or_404(property_id)
    
    try:
        # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –ø–æ–≤'—è–∑–∞–Ω—ñ —Ñ–∞–π–ª–∏ –∑ S3
        for photo in property_obj.photos:
            delete_file_from_s3(photo.filename)
        
        for unit in property_obj.units:
            for unit_photo in unit.photos:
                delete_file_from_s3(unit_photo.filename)
        
        for document in property_obj.documents:
            delete_file_from_s3(document.filename)
        
        db.session.delete(property_obj)
        db.session.commit()
        
        flash('–ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞!', 'success')
        
    except Exception as e:
        db.session.rollback()
        app.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ: {e}")
        flash('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ.', 'error')
    
    return redirect(url_for('properties'))


@app.route('/properties/<int:property_id>/units/add', methods=['POST'])
@login_required
def add_property_unit(property_id):
    """–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –¥–æ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)"""
    app.logger.info(f"üìã === –î–û–î–ê–í–ê–ù–ù–Ø –ü–õ–ê–ù–£–í–ê–ù–ù–Ø ===")
    app.logger.info(f"   Property ID: {property_id}")
    app.logger.info(f"   User: {current_user.username} (role: {current_user.role})")
    
    if current_user.role != 'admin':
        app.logger.warning("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ - –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–¥–º—ñ–Ω")
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'})
    
    property_obj = Property.query.get_or_404(property_id)
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ JSON
        data = request.get_json()
        app.logger.info(f"   –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ: {data}")
        
        # –í–∞–ª—ñ–¥—É—î–º–æ –¥–∞–Ω—ñ
        if not data or 'unit_type' not in data or 'size_from' not in data or 'price_per_unit' not in data:
            app.logger.error("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è")
            return jsonify({'success': False, 'message': '–ù–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ - –≤—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è'})
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è
        unit = PropertyUnit(
            property_id=property_id,
            unit_type=data['unit_type'],
            size_from=float(data['size_from']),
            size_to=float(data['size_to']) if data.get('size_to') else None,
            price_per_unit=float(data['price_per_unit'])
        )
        
        db.session.add(unit)
        db.session.commit()
        
        app.logger.info(f"‚úÖ –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ: ID={unit.id}")
        return jsonify({'success': True, 'message': '–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!'})
        
    except ValueError as e:
        db.session.rollback()
        app.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö: {e}")
        return jsonify({'success': False, 'message': '–ù–µ–≤–∞–ª—ñ–¥–Ω—ñ –¥–∞–Ω—ñ - –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏—Å–ª–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è'})
    except Exception as e:
        db.session.rollback()
        app.logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è: {type(e).__name__}: {str(e)}")
        app.logger.error(traceback.format_exc())
        return jsonify({'success': False, 'message': f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è: {str(e)}'})


@app.route('/properties/<int:property_id>/units/<int:unit_id>/delete', methods=['POST'])
@login_required
def delete_property_unit(property_id, unit_id):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)"""
    if current_user.role != 'admin':
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'})
    
    unit = PropertyUnit.query.get_or_404(unit_id)
    
    try:
        # –í–∏–¥–∞–ª—è—î–º–æ —Ñ–æ—Ç–æ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∑ S3
        for photo in unit.photos:
            delete_file_from_s3(photo.filename)
        
        db.session.delete(unit)
        db.session.commit()
        
        return jsonify({'success': True, 'message': '–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!'})
        
    except Exception as e:
        db.session.rollback()
        app.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è: {e}")
        return jsonify({'success': False, 'message': '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è'})


@app.route('/properties/<int:property_id>/upload-photos', methods=['POST'])
@login_required
def upload_property_photos(property_id):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ –≤ S3 (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)"""
    if current_user.role != 'admin':
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'})
    
    property_obj = Property.query.get_or_404(property_id)
    
    if 'photos' not in request.files:
        return jsonify({'success': False, 'message': '–§–∞–π–ª–∏ –Ω–µ –≤–∏–±—Ä–∞–Ω—ñ'})
    
    files = request.files.getlist('photos')
    uploaded_files = []
    
    try:
        for file in files:
            if file and file.filename:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø —Ñ–∞–π–ª—É
                if not file.filename.lower().endswith(('.png', '.jpg', '.jpeg', '.gif')):
                    continue
                
                # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É –¥–ª—è S3
                unique_filename = f"properties/{property_id}_{int(time.time())}_{file.filename}"
                
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª –≤ S3
                s3_url = upload_file_to_s3(file, unique_filename)
                
                # –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
                photo = PropertyPhoto(
                    property_id=property_id,
                    filename=unique_filename,  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —à–ª—è—Ö –≤ S3 –∞–±–æ –ª–æ–∫–∞–ª—å–Ω–æ
                    file_path=s3_url,  # URL —Ñ–∞–π–ª—É –≤ S3 –∞–±–æ –ª–æ–∫–∞–ª—å–Ω–æ
                    file_size=len(file.read()),
                    file_type=file.content_type
                )
                file.seek(0)  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é —Ñ–∞–π–ª—É –Ω–∞ –ø–æ—á–∞—Ç–æ–∫
                db.session.add(photo)
                uploaded_files.append(unique_filename)
        
        db.session.commit()
        return jsonify({'success': True, 'message': f'–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(uploaded_files)} —Ñ–æ—Ç–æ'})
        
    except Exception as e:
        db.session.rollback()
        app.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ –≤ S3: {e}")
        return jsonify({'success': False, 'message': '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–æ—Ç–æ'})


@app.route('/properties/<int:property_id>/upload-documents', methods=['POST'])
@login_required
def upload_property_documents(property_id):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ –≤ S3 (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤, –º–∞–∫—Å–∏–º—É–º 5)"""
    if current_user.role != 'admin':
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'})
    
    property_obj = Property.query.get_or_404(property_id)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
    if len(property_obj.documents) >= 5:
        return jsonify({'success': False, 'message': '–ú–∞–∫—Å–∏–º—É–º 5 –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –Ω–∞ –ø—Ä–æ–µ–∫—Ç'})
    
    if 'documents' not in request.files:
        return jsonify({'success': False, 'message': '–§–∞–π–ª–∏ –Ω–µ –≤–∏–±—Ä–∞–Ω—ñ'})
    
    files = request.files.getlist('documents')
    uploaded_files = []
    
    try:
        for file in files:
            if file and file.filename and len(property_obj.documents) + len(uploaded_files) < 5:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø —Ñ–∞–π–ª—É
                if not file.filename.lower().endswith(('.pdf', '.doc', '.docx', '.txt')):
                    continue
                
                # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É –¥–ª—è S3
                unique_filename = f"documents/{property_id}_{int(time.time())}_{file.filename}"
                
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª –≤ S3
                s3_url = upload_file_to_s3(file, unique_filename)
                
                # –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
                document = PropertyDocument(
                    property_id=property_id,
                    filename=unique_filename,  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —à–ª—è—Ö –≤ S3
                    file_path=s3_url,  # URL —Ñ–∞–π–ª—É –≤ S3
                    file_size=len(file.read()),
                    file_type=file.content_type,
                    description=request.form.get('description', '')
                )
                file.seek(0)  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é —Ñ–∞–π–ª—É –Ω–∞ –ø–æ—á–∞—Ç–æ–∫
                db.session.add(document)
                uploaded_files.append(unique_filename)
        
        db.session.commit()
        return jsonify({'success': True, 'message': f'–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(uploaded_files)} –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤'})
        
    except Exception as e:
        db.session.rollback()
        app.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –≤ S3: {e}")
        return jsonify({'success': False, 'message': '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤'})


@app.route('/units/<int:unit_id>/upload-photos', methods=['POST'])
@login_required
def upload_unit_photos(unit_id):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –≤ S3 (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)"""
    if current_user.role != 'admin':
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ'})
    
    unit = PropertyUnit.query.get_or_404(unit_id)
    
    if 'photos' not in request.files:
        return jsonify({'success': False, 'message': '–§–∞–π–ª–∏ –Ω–µ –≤–∏–±—Ä–∞–Ω—ñ'})
    
    files = request.files.getlist('photos')
    uploaded_files = []
    
    try:
        for file in files:
            if file and file.filename:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø —Ñ–∞–π–ª—É
                if not file.filename.lower().endswith(('.png', '.jpg', '.jpeg', '.gif')):
                    continue
                
                # –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É –¥–ª—è S3
                unique_filename = f"units/{unit_id}_{int(time.time())}_{file.filename}"
                
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª –≤ S3
                s3_url = upload_file_to_s3(file, unique_filename)
                
                # –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
                photo = UnitPhoto(
                    unit_id=unit_id,
                    filename=unique_filename,  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —à–ª—è—Ö –≤ S3
                    file_path=s3_url,  # URL —Ñ–∞–π–ª—É –≤ S3
                    file_size=len(file.read()),
                    file_type=file.content_type
                )
                file.seek(0)  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é —Ñ–∞–π–ª—É –Ω–∞ –ø–æ—á–∞—Ç–æ–∫
                db.session.add(photo)
                uploaded_files.append(unique_filename)
        
        db.session.commit()
        return jsonify({'success': True, 'message': f'–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(uploaded_files)} —Ñ–æ—Ç–æ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è'})
        
    except Exception as e:
        db.session.rollback()
        app.logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –≤ S3: {e}")
        return jsonify({'success': False, 'message': '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–æ—Ç–æ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è'})


if __name__ == '__main__':
    with app.app_context():
        db.create_all()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–¥–º—ñ–Ω–∞ —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
        admin = User.query.filter_by(username='admin').first()
        if not admin:
            from werkzeug.security import generate_password_hash
            admin = User(
                username='admin',
                email='admin@example.com',
                password_hash=generate_password_hash('admin123'),
                role='admin'
            )
            db.session.add(admin)
            db.session.commit()
            print("–°—Ç–≤–æ—Ä–µ–Ω–æ –∞–¥–º—ñ–Ω–∞: username='admin', password='admin123'")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ–æ–Ω–æ–≤—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –∑ HubSpot
    start_background_sync()

# ===== –î–Ü–ê–ì–ù–û–°–¢–ò–ß–ù–ò–ô –ï–ù–î–ü–û–Ü–ù–¢ =====
@app.route('/api/diagnostic', methods=['GET'])
@login_required
def diagnostic():
    """–î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—ñ"""
    if current_user.role != 'admin':
        return jsonify({'success': False, 'message': '–î–æ—Å—Ç—É–ø —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤'})
    
    diagnostic_info = {
        'success': True,
        'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
        'environment': {
            'database': {
                'type': 'PostgreSQL' if app.config['SQLALCHEMY_DATABASE_URI'].startswith('postgresql') else 'SQLite',
                'configured': bool(app.config.get('SQLALCHEMY_DATABASE_URI')),
                'connection_test': None
            },
            'hubspot': {
                'api_key_set': bool(HUBSPOT_API_KEY),
                'client_configured': hubspot_client is not None,
                'connection_test': None
            },
            's3': {
                'access_key_set': bool(app.config.get('AWS_ACCESS_KEY_ID')),
                'secret_key_set': bool(app.config.get('AWS_SECRET_ACCESS_KEY')),
                'bucket_set': bool(app.config.get('AWS_S3_BUCKET')),
                'region': app.config.get('AWS_REGION', 'not set'),
                'client_configured': get_s3_client() is not None
            },
            'flask': {
                'secret_key_set': bool(app.config.get('SECRET_KEY')),
                'csrf_enabled': csrf._exempt_views == set() if hasattr(csrf, '_exempt_views') else True
            }
        }
    }
    
    # –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
    try:
        db.session.execute(db.text('SELECT 1'))
        diagnostic_info['environment']['database']['connection_test'] = 'success'
    except Exception as e:
        diagnostic_info['environment']['database']['connection_test'] = f'error: {str(e)}'
    
    # –¢–µ—Å—Ç HubSpot –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    if hubspot_client:
        try:
            hubspot_client.crm.contacts.basic_api.get_page(limit=1)
            diagnostic_info['environment']['hubspot']['connection_test'] = 'success'
        except Exception as e:
            error_str = str(e)
            diagnostic_info['environment']['hubspot']['connection_test'] = f'error: {error_str[:200]}'
            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–∏–ø –ø–æ–º–∏–ª–∫–∏
            if '401' in error_str or 'Unauthorized' in error_str:
                diagnostic_info['environment']['hubspot']['connection_test'] += ' (–Ω–µ–¥—ñ–π—Å–Ω–∏–π API –∫–ª—é—á)'
            elif '403' in error_str or 'Forbidden' in error_str:
                diagnostic_info['environment']['hubspot']['connection_test'] += ' (–Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É)'
            elif '429' in error_str:
                diagnostic_info['environment']['hubspot']['connection_test'] += ' (–ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤)'
    else:
        diagnostic_info['environment']['hubspot']['connection_test'] = 'client_not_configured'
        if not HUBSPOT_API_KEY:
            diagnostic_info['environment']['hubspot']['connection_test'] += ' (HUBSPOT_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)'
        else:
            diagnostic_info['environment']['hubspot']['connection_test'] += ' (–ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞)'
    
    return jsonify(diagnostic_info)
