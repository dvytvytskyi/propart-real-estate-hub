#!/bin/bash

echo "üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –°–ï–†–í–ï–†–ê"
echo "======================================"
echo ""

# 1. –ú–µ—Ä–µ–∂–∞
echo "üì° 1. –ü–ï–†–ï–í–Ü–†–ö–ê –ú–ï–†–ï–ñ–Ü:"
echo -n "   Ping —Å–µ—Ä–≤–µ—Ä–∞: "
ping -c 1 -W 2 188.245.228.175 > /dev/null 2>&1 && echo "‚úÖ OK" || echo "‚ùå FAIL"

echo -n "   PostgreSQL –ø–æ—Ä—Ç 5432: "
nc -zv 188.245.228.175 5432 2>&1 | grep -q succeeded && echo "‚úÖ OK" || echo "‚ùå FAIL"
echo ""

# 2. PostgreSQL
echo "üóÑÔ∏è  2. –ü–ï–†–ï–í–Ü–†–ö–ê PostgreSQL:"
python3 << 'EOF'
import psycopg2
try:
    conn = psycopg2.connect(
        host='188.245.228.175',
        port=5432,
        user='propart_user_estate',
        password='$u~gIi18jt535]~Bv=M~d#ivk<jkX0',
        database='propart_real_estate',
        connect_timeout=5
    )
    print('   –°—Ç–∞—Ç—É—Å: ‚úÖ –ü–†–ê–¶–Æ–Ñ')
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM "user";')
    count = cursor.fetchone()[0]
    print(f'   –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {count}')
    conn.close()
except psycopg2.OperationalError as e:
    if 'recovery' in str(e).lower():
        print('   –°—Ç–∞—Ç—É—Å: ‚ö†Ô∏è  RECOVERY MODE')
    else:
        print(f'   –°—Ç–∞—Ç—É—Å: ‚ùå –ü–û–ú–ò–õ–ö–ê')
    print(f'   –î–µ—Ç–∞–ª—ñ: {str(e)[:100]}')
except Exception as e:
    print(f'   –°—Ç–∞—Ç—É—Å: ‚ùå –ü–û–ú–ò–õ–ö–ê: {e}')
EOF
echo ""

# 3. –õ–æ–∫–∞–ª—å–Ω–∞ SQLite
echo "üíæ 3. –õ–û–ö–ê–õ–¨–ù–ê SQLite:"
if [ -f "instance/propart.db" ]; then
    SIZE=$(du -h instance/propart.db | cut -f1)
    echo "   –§–∞–π–ª: ‚úÖ –Ü—Å–Ω—É—î ($SIZE)"
    python3 << 'EOF'
from app import app, db, User
with app.app_context():
    try:
        count = User.query.count()
        print(f'   –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {count}')
    except:
        print('   –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: ‚ùå –ü–æ–º–∏–ª–∫–∞')
EOF
else
    echo "   –§–∞–π–ª: ‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
fi
echo ""

# 4. Flask —Å–µ—Ä–≤–µ—Ä
echo "üåê 4. FLASK –°–ï–†–í–ï–†:"
FLASK_PROCESSES=$(ps aux | grep "python run.py" | grep -v grep | wc -l)
if [ $FLASK_PROCESSES -gt 0 ]; then
    echo "   –ü—Ä–æ—Ü–µ—Å–∏: ‚úÖ –ó–∞–ø—É—â–µ–Ω–æ ($FLASK_PROCESSES)"
    HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5001/ 2>&1)
    if [ "$HTTP_CODE" == "302" ] || [ "$HTTP_CODE" == "200" ]; then
        echo "   HTTP: ‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î ($HTTP_CODE)"
    else
        echo "   HTTP: ‚ùå –ü–æ–º–∏–ª–∫–∞ ($HTTP_CODE)"
    fi
else
    echo "   –ü—Ä–æ—Ü–µ—Å–∏: ‚ùå –ù–µ –∑–∞–ø—É—â–µ–Ω–æ"
    echo "   HTTP: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
fi
echo ""

# 5. –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
echo "‚öôÔ∏è  5. –ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø (.env):"
if grep -q "^DATABASE_URL=postgresql" .env 2>/dev/null; then
    echo "   –ë–î: PostgreSQL (–ø—Ä–æ–¥–∞–∫—à–Ω)"
elif grep -q "^#.*DATABASE_URL=postgresql" .env 2>/dev/null; then
    echo "   –ë–î: SQLite (–ª–æ–∫–∞–ª—å–Ω–∞)"
else
    echo "   –ë–î: SQLite (fallback)"
fi

if grep -q "HUBSPOT_API_KEY=pat-" .env 2>/dev/null; then
    echo "   HubSpot: ‚úÖ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
else
    echo "   HubSpot: ‚ùå –ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
fi
echo ""

echo "======================================"
echo "‚úÖ –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê"

